{
  "manifest": {
    "name": "read-all-stream",
    "version": "3.1.0",
    "description": "Read all stream content and pass it to callback",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/floatdrop/read-all-stream.git"
    },
    "author": {
      "name": "Vsevolod Strukchinsky",
      "email": "floatdrop@gmail.com"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "test": "mocha"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "stream",
      "read",
      "buffer",
      "callback"
    ],
    "devDependencies": {
      "mocha": "*"
    },
    "dependencies": {
      "pinkie-promise": "^2.0.0",
      "readable-stream": "^2.0.0"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-read-all-stream-3.1.0-35c3e177f2078ef789ee4bfafa4373074eaef4fa\\node_modules\\read-all-stream\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# read-all-stream [![Build Status][travis-image]][travis-url]\n\n> Read stream to buffer or string\n\n## Install\n\n```\n$ npm install --save read-all-stream\n```\n\n## Usage\n\n```js\nvar read = require('read-all-stream');\nvar stream = fs.createReadStream('index.js');\n\nread(stream).then(function (data) {\n\tconsole.log(data.length);\n});\n\nread(stream, 'utf8', function (err, data) {\n\tconsole.log(data.length);\n\t//=> 42\n});\n\n```\n\n### API\n\n#### read(stream, [options], [callback])\n\nIf callback is omitted, Promise will be returned.\n\n##### stream\n\n*Required*  \nType: `Stream`\n\nEvent emitter, which `data` events will be consumed.\n\n##### options\n\nType: `object` or `string`\n\nIf type of `options` is `string`, then it will be used as encoding.\nIf type is `Object`, then next options are available:\n\n##### options.encoding\n\nType: `string`, `null`  \nDefault: `'utf8'`\n\nEncoding to be used on `toString` of the data. If null, the body is returned as a Buffer.\n\n##### callback(err, data)\n\nWill be called after stream is read.\n\n###### err\n\n`Error` object (if `error` event happens).\n\n###### data\n\nThe data in stream.\n\n## License\n\nMIT Â© [Vsevolod Strukchinsky](floatdrop@gmail.com)\n\n[travis-url]: https://travis-ci.org/floatdrop/read-all-stream\n[travis-image]: https://img.shields.io/travis/floatdrop/read-all-stream.svg\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Vsevolod Strukchinsky <floatdrop@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/read-all-stream/-/read-all-stream-3.1.0.tgz#35c3e177f2078ef789ee4bfafa4373074eaef4fa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/read-all-stream/-/read-all-stream-3.1.0.tgz",
    "hash": "35c3e177f2078ef789ee4bfafa4373074eaef4fa",
    "integrity": "sha1-NcPhd/IHjveJ7kv6+kNzB06u9Po=",
    "registry": "npm",
    "packageName": "read-all-stream"
  },
  "registry": "npm",
  "hash": "35c3e177f2078ef789ee4bfafa4373074eaef4fa"
}