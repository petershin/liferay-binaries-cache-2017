{
  "manifest": {
    "name": "eslint-config-prettier",
    "version": "4.1.0",
    "license": "MIT",
    "author": {
      "name": "Simon Lydell"
    },
    "description": "Turns off all rules that are unnecessary or might conflict with Prettier.",
    "repository": {
      "type": "git",
      "url": "https://github.com/prettier/eslint-config-prettier.git"
    },
    "files": [
      "bin/",
      "@typescript-eslint.js",
      "babel.js",
      "flowtype.js",
      "index.js",
      "react.js",
      "standard.js",
      "unicorn.js",
      "vue.js"
    ],
    "bin": {
      "eslint-config-prettier-check": "bin/cli.js"
    },
    "keywords": [
      "eslint",
      "eslintconfig",
      "prettier"
    ],
    "scripts": {
      "doctoc": "doctoc README.md && replace \"\\[\\[([\\w/-]+)\\](?:([^\\[\\]]+)\\[([\\w/-]+)\\])?\\]\" \"[\\$1\\$2\\$3]\" README.md",
      "test:lint": "eslint .",
      "test:lint-verify-fail": "eslint \"test-lint/*.{js,ts,vue}\" --config .eslintrc.base.js --format json",
      "test:lint-rules": "eslint index.js --config test-config/.eslintrc.js --format json",
      "test:jest": "jest",
      "test:cli-sanity": "eslint --print-config . | node ./bin/cli.js",
      "test:cli-sanity-warning": "eslint --print-config ./bin/cli.js | node ./bin/cli.js",
      "test": "npm run test:lint && npm run test:jest && npm run test:cli-sanity && npm run test:cli-sanity-warning"
    },
    "dependencies": {
      "get-stdin": "^6.0.0"
    },
    "devDependencies": {
      "@typescript-eslint/eslint-plugin": "1.4.2",
      "@typescript-eslint/parser": "1.4.2",
      "babel-eslint": "10.0.1",
      "cross-spawn": "6.0.5",
      "doctoc": "1.4.0",
      "eslint": "5.14.1",
      "eslint-config-google": "0.12.0",
      "eslint-plugin-babel": "5.3.0",
      "eslint-plugin-flowtype": "3.4.2",
      "eslint-plugin-prettier": "3.0.1",
      "eslint-plugin-react": "7.12.4",
      "eslint-plugin-standard": "4.0.0",
      "eslint-plugin-unicorn": "7.1.0",
      "eslint-plugin-vue": "github:vuejs/eslint-plugin-vue#9c49dcc8ff792ec6798037bd6b7f4ac3d26fdf68",
      "jest": "24.1.0",
      "prettier": "1.16.4",
      "replace": "1.0.1",
      "rimraf": "2.6.3",
      "typescript": "3.3.3333"
    },
    "peerDependencies": {
      "eslint": ">=3.14.1"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-eslint-config-prettier-4.1.0-181364895899fff9fd3605fecb5c4f20e7d5f395\\node_modules\\eslint-config-prettier\\package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-config-prettier [![Build Status][travis-badge]][travis]\n\nTurns off all rules that are unnecessary or might conflict with [Prettier].\n\nThis lets you use you favorite shareable config without letting its stylistic\nchoices get in the way when using Prettier.\n\nNote that this config _only_ turns rules _off,_ so it only makes sense using\nit together with some other config.\n\n## Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [CLI helper tool](#cli-helper-tool)\n- [Example configuration](#example-configuration)\n- [Special rules](#special-rules)\n  - [arrow-body-style and prefer-arrow-callback](#arrow-body-style-and-prefer-arrow-callback)\n  - [curly](#curly)\n  - [lines-around-comment](#lines-around-comment)\n  - [max-len](#max-len)\n  - [no-confusing-arrow](#no-confusing-arrow)\n  - [no-mixed-operators](#no-mixed-operators)\n  - [no-tabs](#no-tabs)\n  - [no-unexpected-multiline](#no-unexpected-multiline)\n  - [quotes](#quotes)\n    - [Enforce backticks](#enforce-backticks)\n    - [Forbid unnecessary backticks](#forbid-unnecessary-backticks)\n      - [Example _double_ quote configuration](#example-_double_-quote-configuration)\n      - [Example _single_ quote configuration](#example-_single_-quote-configuration)\n  - [vue/html-self-closing](#vuehtml-self-closing)\n- [Other rules worth mentioning](#other-rules-worth-mentioning)\n  - [no-sequences](#no-sequences)\n- [Contributing](#contributing)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nTip: First, you might be interested in installing [eslint-plugin-prettier].\nFollow the instructions over there. This is optional, though.\n\nInstall eslint-config-prettier:\n\n```\nnpm install --save-dev eslint-config-prettier\n```\n\nThen, add eslint-config-prettier to the \"extends\" array in your `.eslintrc.*`\nfile. Make sure to put it **last,** so it gets the chance to override other\nconfigs.\n\n```json\n{\n  \"extends\": [\n    \"some-other-config-you-use\",\n    \"prettier\"\n  ]\n}\n```\n\nA few ESLint plugins are supported as well:\n\n- [@typescript-eslint/eslint-plugin]\n- [eslint-plugin-babel]\n- [eslint-plugin-flowtype]\n- [eslint-plugin-react]\n- [eslint-plugin-standard]\n- [eslint-plugin-unicorn]\n- [eslint-plugin-vue]\n\nAdd extra exclusions for the plugins you use like so:\n\n```json\n{\n  \"extends\": [\n    \"some-other-config-you-use\",\n    \"prettier\",\n    \"prettier/@typescript-eslint\",\n    \"prettier/babel\",\n    \"prettier/flowtype\",\n    \"prettier/react\",\n    \"prettier/standard\",\n    \"prettier/unicorn\",\n    \"prettier/vue\"\n  ]\n}\n```\n\nIf you extend a config which uses a plugin, it is recommended to add\n`\"prettier/that-plugin\"` (if available). For example, [eslint-config-airbnb]\nenables [eslint-plugin-react] rules, so `\"prettier/react\"` is needed:\n\n```json\n{\n  \"extends\": [\n    \"airbnb\",\n    \"prettier\",\n    \"prettier/react\"\n  ]\n}\n```\n\nIf you’re unsure which plugins are used, you can usually find them in your\n`package.json`.\n\n## CLI helper tool\n\neslint-config-prettier also ships with a little CLI tool to help you check if\nyour configuration contains any rules that are unnecessary or conflict with\nPrettier.\n\nFirst, add a script for it to package.json:\n\n```json\n{\n  \"scripts\": {\n    \"eslint-check\": \"eslint --print-config . | eslint-config-prettier-check\"\n  }\n}\n```\n\nThen run `npm run eslint-check`.\n\nIf you use [multiple configuration files] or [overrides], you may need to run\nthe above script several times with different `--print-config` arguments, such\nas:\n\n```\neslint --print-config test/index.js | eslint-config-prettier-check\n```\n\nExit codes:\n\n- 0: No problems found.\n- 1: Unexpected error.\n- 2: Conflicting rules found.\n\n## Example configuration\n\n```json\n{\n  \"extends\": [\n    \"standard\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:flowtype/recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:unicorn/recommended\",\n    \"plugin:vue/recommended\",\n    \"prettier\",\n    \"prettier/@typescript-eslint\",\n    \"prettier/babel\",\n    \"prettier/flowtype\",\n    \"prettier/react\",\n    \"prettier/standard\",\n    \"prettier/unicorn\",\n    \"prettier/vue\"\n  ],\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"babel\",\n    \"flowtype\",\n    \"prettier\",\n    \"react\",\n    \"standard\",\n    \"unicorn\",\n    \"vue\"\n  ],\n  \"parserOptions\": {\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"env\": {\n    \"es6\": true,\n    \"node\": true\n  },\n  \"rules\": {\n    \"prettier/prettier\": \"error\"\n  }\n}\n```\n\n## Special rules\n\nThere a few rules that eslint-config-prettier disables that actually can be\nenabled in some cases.\n\n- Some require certain options. The CLI helper tool validates this.\n- Some require special attention when writing code. The CLI helper tool warns\n  you if any of those rules are enabled, but can’t tell if anything is\n  problematic.\n- Some can cause problems if using [eslint-plugin-prettier] and `--fix`.\n\nFor maximum ease of use, the special rules are disabled by default. If you want\nthem, you need to explicitly specify them in your ESLint config.\n\n### [arrow-body-style] and [prefer-arrow-callback]\n\n**These rules might cause problems if using [eslint-plugin-prettier] and `--fix`.**\n\nIf you use any of these rules together with the `prettier/prettier` rule from\n[eslint-plugin-prettier], you can in some cases end up with invalid code due to\na bug in ESLint’s autofix.\n\nThese rules are safe to use if:\n\n- You don’t use [eslint-plugin-prettier]. In other words, you run `eslint --fix`\n  and `prettier --write` as separate steps.\n- You _do_ use [eslint-plugin-prettier], but don’t use `--fix`. (But then,\n  what’s the point?)\n\nYou _can_ still use these rules together with [eslint-plugin-prettier] if you\nwant, because the bug does not occur _all the time._ But if you do, you need to\nkeep in mind that you might end up with invalid code, where you manually have to\ninsert a missing closing parenthesis to get going again.\n\nIf you’re fixing large of amounts of previously unformatted code, consider\ntemporarily disabling the `prettier/prettier` rule and running `eslint --fix`\nand `prettier --write` separately.\n\nSee these issues for more information:\n\n- [eslint-config-prettier#31]\n- [eslint-config-prettier#71]\n- [eslint-plugin-prettier#65]\n\nWhen the autofix bug in ESLint has been fixed, the special case for these rules\ncan be removed.\n\n### [curly]\n\n**This rule requires certain options.**\n\nIf a block (for example after `if`, `else`, `for` or `while`) contains only one\nstatement, JavaScript allows omitting the curly braces around that statement.\nThis rule enforces if or when those optional curly braces should be omitted.\n\nIf you use the `\"multi-line\"` or `\"multi-or-nest\"` option, the rule can conflict\nwith Prettier.\n\nFor example, the `\"multi-line\"` option allows this line:\n\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0) updateCart(cart);\n```\n\nHowever, Prettier might consider the line too long and turn it into the\nfollowing, which the `\"multi-line\"` option does _not_ allow:\n\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0)\n  updateCart(cart);\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as you\ndon’t use the `\"multi-line\"` or `\"multi-or-nest\"` option.\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"curly\": [\"error\", \"all\"]\n  }\n}\n```\n\n### [lines-around-comment]\n\n**This rule can be used with certain options.**\n\nThis rule requires empty lines before and/or after comments. Prettier preserves\nblank lines, with two exceptions:\n\n- Several blank lines in a row are collapsed into a single blank line. This is\n  fine.\n- Blank lines at the beginning and end of blocks, objects and arrays are always\n  removed. This may lead to conflicts.\n\nBy default, ESLint requires a blank line above the comment is this case:\n\n```js\nif (result) {\n\n  /* comment */\n  return result;\n}\n```\n\nHowever, Prettier removes the blank line:\n\n```js\nif (result) {\n  /* comment */\n  return result;\n}\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as you add\nsome extra configuration to allow comments at the start and end of blocks,\nobjects and arrays.\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"lines-around-comment\": [\n      \"error\",\n      {\n        \"beforeBlockComment\": true,\n        \"afterBlockComment\": true,\n        \"beforeLineComment\": true,\n        \"afterLineComment\": true,\n        \"allowBlockStart\": true,\n        \"allowBlockEnd\": true,\n        \"allowObjectStart\": true,\n        \"allowObjectEnd\": true,\n        \"allowArrayStart\": true,\n        \"allowArrayEnd\": true\n      }\n    ]\n  }\n}\n```\n\n### [max-len]\n\n**This rule requires special attention when writing code.**\n\nUsually, Prettier takes care of following a maximum line length automatically.\nHowever, there are cases where Prettier can’t do anything, such as for long\nstrings, regular expressions and comments. Those need to be split up by a human.\n\nIf you’d like to enforce an even stricter maximum line length policy than\nPrettier can provide automatically, you can enable this rule. Just remember to\nkeep `max-len`’s options and Prettier’s `printWidth` option in sync.\n\nKeep in mind that you might have to refactor code slightly if Prettier formats\nlines in a way that the `max-len` rule does not approve of.\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"max-len\": [\"error\", {\"code\": 80, \"ignoreUrls\": true}]\n  }\n}\n```\n\n### [no-confusing-arrow]\n\n**This rule requires certain options.**\n\nFor example, the rule could warn about this line:\n\n```js\nvar x = a => 1 ? 2 : 3;\n```\n\nBy default, ESLint suggests switching to an explicit return:\n\n```js\nvar x = a => { return 1 ? 2 : 3; };\n```\n\nThat causes no problems with Prettier.\n\nWith `{allowParens: true}`, adding parentheses is also considered a valid way to\navoid the arrow confusion:\n\n```js\nvar x = a => (1 ? 2 : 3);\n```\n\nWhile Prettier keeps thoses parentheses, it removes them if the line is long\nenough to introduce a line break:\n\n```js\nEnterpriseCalculator.prototype.calculateImportantNumbers = inputNumber =>\n  1 ? 2 : 3;\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as the\n`allowParens` option is off.\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-confusing-arrow\": \"error\"\n  }\n}\n```\n\n### [no-mixed-operators]\n\n**This rule requires special attention when writing code.**\n\nThis rule forbids mixing certain operators, such as `&&` and `||`.\n\nFor example, the rule could warn about this line:\n\n```js\nvar foo = a + b * c;\n```\n\nThe rule suggests adding parentheses, like this:\n\n```js\nvar foo = a + (b * c);\n```\n\nHowever, Prettier removes many “unnecessary” parentheses, turning it back to:\n\n```js\nvar foo = a + b * c;\n```\n\nIf you want to use this rule with Prettier, you need to split the expression\ninto another variable:\n\n```js\nvar bar = b * c;\nvar foo = a + bar;\n```\n\nKeep in mind that Prettier prints _some_ “unnecessary” parentheses, though:\n\n```js\nvar foo = (a && b) || c;\n```\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-mixed-operators\": \"error\"\n  }\n}\n```\n\n### [no-tabs]\n\n**This rule requires certain Prettier options.**\n\nThis rule disallows the use of tab characters at all. It can be used just fine\nwith Prettier as long as you don’t configure Prettier to indent using tabs.\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-tabs\": \"error\"\n  }\n}\n```\n\nExample Prettier configuration (this is the default, so adding this is not\nrequired):\n\n```json\n{\n  \"useTabs\": false\n}\n```\n\n**Note:** Since [ESlint 5.7.0] this rule can be configured to work regardless of\nyour Prettier configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-tabs\": [\"error\", {\"allowIndentationTabs\": true}]\n  }\n}\n```\n\nA future version of eslint-config-prettier might check for that automatically.\n\n### [no-unexpected-multiline]\n\n**This rule requires special attention when writing code.**\n\nThis rule disallows confusing multiline expressions where a newline looks like\nit is ending a statement, but is not.\n\nFor example, the rule could warn about this:\n\n```js\nvar hello = \"world\"\n[1, 2, 3].forEach(addNumber)\n```\n\nPrettier usually formats this in a way that makes it obvious that a semicolon\nwas missing:\n\n```js\nvar hello = \"world\"[(1, 2, 3)].forEach(addNumber);\n```\n\nHowever, there are cases where Prettier breaks things into several lines such\nthat the `no-unexpected-multiline` conflicts.\n\n```js\nconst value = text.trim().split(\"\\n\")[position].toLowerCase();\n```\n\nPrettier breaks it up into several lines, though, causing a conflict:\n\n```js\nconst value = text\n  .trim()\n  .split(\"\\n\")\n  [position].toLowerCase();\n```\n\nIf you like this rule, it can usually be used with Prettier without problems,\nbut occasionally you might need to either temporarily disable the rule or\nrefactor your code.\n\n```js\nconst value = text\n  .trim()\n  .split(\"\\n\")\n  // eslint-disable-next-line no-unexpected-multiline\n  [position].toLowerCase();\n\n// Or:\n\nconst lines = text.trim().split(\"\\n\");\nconst value = lines[position].toLowerCase();\n```\n\n**Note:** If you _do_ enable this rule, you have to run ESLint and Prettier as\ntwo separate steps (and ESLint first) in order to get any value out of it.\nOtherwise Prettier might reformat your code in such a way that ESLint never gets\na chance to report anything (as seen in the first example).\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-unexpected-multiline\": \"error\"\n  }\n}\n```\n\n### [quotes]\n\n(The following applies to [babel/quotes] as well.)\n\n**This rule requires certain options and certain Prettier options.**\n\nUsually, you don’t need this rule at all. But there are two cases where it could\nbe useful:\n\n- To enforce the use of backticks rather than single or double quotes for\n  strings.\n- To forbid backticks where regular strings could have been used.\n\n#### Enforce backticks\n\nIf you’d like all strings to use backticks (never quotes), enable the\n`\"backtick\"` option.\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"quotes\": [\"error\", \"backtick\"]\n  }\n}\n```\n\n#### Forbid unnecessary backticks\n\nIn the following example, the first array item could have been written with\nquotes instead of backticks.\n\n```js\nconst strings = [\n  `could have been a regular string`,\n  `\n    multiple\n    lines\n  `,\n  `uses ${interpolation}`,\n  String.raw`\\tagged/`,\n];\n```\n\nIf you’d like ESLint to enforce `` `could have been a regular string` `` being\nwritten as either `\"could have been a regular string\"` or `'could have been a\nregular string'`, you need to use some specific configuration. The `quotes` rule has two options, a string option and an object option.\n\n- The first (string) option needs to be set to `\"single\"` or `\"double\"` and be\n  kept in sync with Prettier’s [singleQuote] option.\n- The second (object) option needs the following properties:\n  - `\"avoidEscape\": true` to follow Prettier’s [string formatting rules].\n  - `\"allowTemplateLiterals\": false` to disallow unnecessary backticks.\n\n##### Example _double_ quote configuration\n\nESLint:\n\n```json\n{\n  \"rules\": {\n    \"quotes\": [\n      \"error\",\n      \"double\",\n      { \"avoidEscape\": true, \"allowTemplateLiterals\": false }\n    ]\n  }\n}\n```\n\nPrettier (this is the default, so adding this is not required):\n\n```json\n{\n  \"singleQuote\": false\n}\n```\n\n##### Example _single_ quote configuration\n\nESLint:\n\n```json\n{\n  \"rules\": {\n    \"quotes\": [\n      \"error\",\n      \"single\",\n      { \"avoidEscape\": true, \"allowTemplateLiterals\": false }\n    ]\n  }\n}\n```\n\nPrettier:\n\n```json\n{\n  \"singleQuote\": true\n}\n```\n\n### [vue/html-self-closing]\n\n**This rule requires certain options.**\n\nThis rule enforces whether elements should be self-closing or not.\n\nPrettier generally preserves the way you wrote your elements:\n\n```vue\n<div />\n<div></div>\n<MyComponent />\n<MyComponent></MyComponent>\n<svg><path d=\"\" /></svg>\n<svg><path d=\"\"></path></svg>\n```\n\nBut for known _void_ HTML elements, Prettier always uses the self-closing style.\nFor example, `<img>` is turned into `<img />`.\n\nIf you like this rule, it can be used just fine with Prettier as long as you\nset `html.void` to `\"any\"`.\n\nExample ESLint configuration:\n\n```json\n{\n  \"rules\": {\n    \"vue/html-self-closing\": [\n      \"error\",\n      {\n        \"html\": {\n          \"void\": \"any\"\n        }\n      }\n    ]\n  }\n}\n```\n\n## Other rules worth mentioning\n\nThese rules don’t conflict with Prettier, but have some gotchas when used with\nPrettier.\n\n### [no-sequences]\n\nThis rule forbids using JavaScript’s confusing comma operator (sequence\nexpressions). This piece of code is not doing what it looks like:\n\n```js\nmatrix[4, 7];\n```\n\nPrettier adds parentheses to the above to make it clear that a sequence\nexpression is used:\n\n```js\nmatrix[(4, 7)];\n```\n\nHowever, the `no-sequences` rule allows comma operators if the expression\nsequence is explicitly wrapped in parentheses. Since Prettier automatically\nwraps them in parentheses, you might never see any warnings from ESLint about\ncomma operators.\n\nEnding up with an accidental sequence expression can easily happen while\nrefactoring. If you want ESLint to catch such mistakes, it is recommended to\nforbid sequence expressions entirely using [no-restricted-syntax] \\([as\nmentioned in the `no-sequences` documentation][no-sequences-full]):\n\n```json\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\"error\", \"SequenceExpression\"]\n  }\n}\n```\n\nIf you still need to use the comma operator for some edge case, you can place an\n`// eslint-disable-next-line no-restricted-syntax` comment on the line above the\nexpression. `no-sequences` can safely be disabled if you use the\n`no-restricted-syntax` approach.\n\nYou can also supply a custom message if you want:\n\n```json\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\n      \"error\",\n      {\n        \"selector\": \"SequenceExpression\",\n        \"message\": \"The comma operator is confusing and a common mistake. Don’t use it!\"\n      }\n    ]\n  }\n}\n```\n\n## Contributing\n\neslint-config-prettier has been tested with:\n\n- ESLint 5.14.1\n  - eslint-config-prettier 2.10.0 and older were tested with ESLint 4.x\n  - eslint-config-prettier 2.1.1 and older were tested with ESLint 3.x\n- prettier 1.16.4\n- @typescript-eslint/eslint-plugin 1.4.2\n- eslint-plugin-babel 5.3.0\n- eslint-plugin-flowtype 3.4.2\n- eslint-plugin-react 7.12.4\n- eslint-plugin-standard 4.0.0\n- eslint-plugin-unicorn 7.1.0\n- eslint-plugin-vue 5.1.0\n\nHave new rules been added since those versions? Have we missed any rules? Is\nthere a plugin you would like to see exclusions for? Open an issue or a pull\nrequest!\n\nIf you’d like to add support for eslint-plugin-foobar, this is how you’d go\nabout it:\n\nFirst, create `foobar.js`:\n\n```js\n\"use strict\";\n\nmodule.exports = {\n  rules: {\n    \"foobar/some-rule\": \"off\"\n  }\n};\n```\n\nThen, create `test-lint/foobar.js`:\n\n```js\n/* eslint-disable quotes */\n\"use strict\";\n\n// Prettier does not want spaces before the parentheses, but\n// `plugin:foobar/recommended` wants one.\nconsole.log();\n```\n\n`test-lint/foobar.js` must fail when used with eslint-plugin-foobar and\neslint-plugin-prettier at the same time – until `\"prettier/foobar\"` is added to\nthe \"extends\" property of an ESLint config. The file should be formatted\naccording to Prettier, and that formatting should disagree with the plugin.\n\nFinally, you need to mention the plugin in several places:\n\n- Add `\"foobar.js\"` to the \"files\" field in `package.json`.\n- Add eslint-plugin-foobar to the \"devDependencies\" field in `package.json`.\n- Make sure that at least one rule from eslint-plugin-foobar gets used in\n  `.eslintrc.base.js`.\n- Add it to the list of supported plugins, to the example config and to\n  Contributing section in `README.md`.\n\nWhen you’re done, run `npm test` to verify that you got it all right. It runs\nseveral other npm scripts:\n\n- `\"test:lint\"` makes sure that the files in `test-lint/` pass ESLint when\n  the exclusions from eslint-config-prettier are used. It also lints the code of\n  eslint-config-prettier itself.\n- `\"test:lint-verify-fail\"` is run by a test in `test/lint-verify-fail.test.js`.\n- `\"test:lint-rules\"` is run by a test in `test/rules.test.js`.\n- `\"test:jest\"` runs unit tests that check a number of things:\n  - That eslint-plugin-foobar is mentioned in all the places shown above.\n  - That no unknown rules are turned off. This helps catching typos, for\n    example.\n  - That the CLI works.\n- `\"test:cli-sanity\"` and `\"test:cli-sanity-warning\"` are sanity checks for the\n  CLI.\n\n## License\n\n[MIT](LICENSE).\n\n[@typescript-eslint/eslint-plugin]: https://github.com/typescript-eslint/typescript-eslint\n[ESlint 5.7.0]: https://eslint.org/blog/2018/10/eslint-v5.7.0-released\n[Prettier]: https://github.com/prettier/prettier\n[arrow-body-style]: https://eslint.org/docs/rules/arrow-body-style\n[babel/quotes]: https://github.com/babel/eslint-plugin-babel#rules\n[curly]: https://eslint.org/docs/rules/curly\n[eslint-config-airbnb]: https://www.npmjs.com/package/eslint-config-airbnb\n[eslint-config-prettier#31]: https://github.com/prettier/eslint-config-prettier/issues/31\n[eslint-config-prettier#71]: https://github.com/prettier/eslint-config-prettier/issues/71\n[eslint-plugin-babel]: https://github.com/babel/eslint-plugin-babel\n[eslint-plugin-flowtype]: https://github.com/gajus/eslint-plugin-flowtype\n[eslint-plugin-prettier#65]: https://github.com/prettier/eslint-plugin-prettier/issues/65\n[eslint-plugin-prettier]: https://github.com/prettier/eslint-plugin-prettier\n[eslint-plugin-react]: https://github.com/yannickcr/eslint-plugin-react\n[eslint-plugin-standard]: https://github.com/xjamundx/eslint-plugin-standard\n[eslint-plugin-unicorn]: https://github.com/sindresorhus/eslint-plugin-unicorn\n[eslint-plugin-vue]: https://github.com/vuejs/eslint-plugin-vue\n[lines-around-comment]: https://eslint.org/docs/rules/lines-around-comment\n[max-len]: https://eslint.org/docs/rules/max-len\n[multiple configuration files]: https://eslint.org/docs/user-guide/configuring#configuration-cascading-and-hierarchy\n[no-confusing-arrow]: https://eslint.org/docs/rules/no-confusing-arrow\n[no-mixed-operators]: https://eslint.org/docs/rules/no-mixed-operators\n[no-restricted-syntax]: https://eslint.org/docs/rules/no-restricted-syntax\n[no-sequences-full]: https://eslint.org/docs/rules/no-sequences#when-not-to-use-it\n[no-sequences]: https://eslint.org/docs/rules/no-sequences\n[no-tabs]: https://eslint.org/docs/rules/no-tabs\n[no-unexpected-multiline]: https://eslint.org/docs/rules/no-unexpected-multiline\n[overrides]: https://eslint.org/docs/user-guide/configuring#configuration-based-on-glob-patterns\n[prefer-arrow-callback]: https://eslint.org/docs/rules/prefer-arrow-callback\n[quotes]: https://eslint.org/docs/rules/quotes\n[singleQuote]: https://prettier.io/docs/en/options.html#quotes\n[string formatting rules]: https://prettier.io/docs/en/rationale.html#strings\n[travis-badge]: https://travis-ci.org/prettier/eslint-config-prettier.svg?branch=master\n[travis]: https://travis-ci.org/prettier/eslint-config-prettier\n[vue/html-self-closing]: https://github.com/vuejs/eslint-plugin-vue/blob/master/docs/rules/html-self-closing.md\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017, 2018, 2019 Simon Lydell and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-config-prettier/-/eslint-config-prettier-4.1.0.tgz#181364895899fff9fd3605fecb5c4f20e7d5f395",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-config-prettier/-/eslint-config-prettier-4.1.0.tgz",
    "hash": "181364895899fff9fd3605fecb5c4f20e7d5f395",
    "integrity": "sha512-zILwX9/Ocz4SV2vX7ox85AsrAgXV3f2o2gpIicdMIOra48WYqgUnWNH/cR/iHtmD2Vb3dLSC3LiEJnS05Gkw7w==",
    "registry": "npm",
    "packageName": "eslint-config-prettier"
  },
  "registry": "npm",
  "hash": "181364895899fff9fd3605fecb5c4f20e7d5f395"
}