{
  "manifest": {
    "name": "babel-plugin-namespace-modules",
    "version": "2.7.1",
    "description": "A Babel plugin to namespace AMD module names based on root's project name.",
    "main": "lib/index.js",
    "scripts": {
      "build": "babel --source-maps -D -d lib src",
      "prepublish": "npm run build"
    },
    "devDependencies": {
      "babel-cli": "^6.24.1",
      "babel-preset-es2015": "^6.24.1"
    },
    "dependencies": {
      "liferay-npm-build-tools-common": "2.7.1",
      "read-json-sync": "^1.1.1"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-babel-plugin-namespace-modules-2.7.1-9522c9238e3a0b52da53ffd01797000faadaabfc\\node_modules\\babel-plugin-namespace-modules\\package.json",
    "readmeFilename": "README.md",
    "readme": "# babel-plugin-namespace-modules\n\n> Namespace modules based on the root project's package name and version. This\n> plugin prepends `<project-package-name>$` to each module name appearance (in \n> define() or require() calls) so that the packages are localized per project \n> and don't clash.\n\n## Example\n\nIf your project is named `test-package`:\n\n**In**\n\n```javascript\ndefine('a-module', ['a-module', './a-local-module', 'fs'], function(){\n\trequire('a-module');\n\trequire('./a-local-module');\n\trequire('fs');\n})\n```\n\n**Out**\n\n```javascript\ndefine('a-module', ['my-project$a-module', './a-local-module', 'fs'], function () {\n\trequire('my-project$a-module');\n\trequire('./a-local-module');\n\trequire('fs');\n})\n```\n\n## Installation\n\n```sh\nnpm install --save-dev babel-plugin-namespace-modules\n```\n\n## Usage\n\nAdd the following to your `.babelrc` file:\n\n**Without options:**\n\n```json\n{\n\t\"plugins\": [\"namespace-modules\"]\n}\n```\n\n## Technical Details\n\nThis plugins scans modules for AMD `define()` and `require()` calls and rewrites \nmodule name arguments to prepend the root project's name to it. \n\nIn case a module belongs to a scoped package, the root project's name is \nprepended to the scope name not including the `@`. So, for example: \n`@a-scope/a-package` would be converted to `@my-project$a-scope/a-package`.\n\nThis plugin is normally used to sandbox dependencies of a whole project so that\nthey are not shared with any other project. This, of course, disables the \npossibility of deduplication between different portlets, but leads to better \nstability and predictability during runtime (specially when using peer \ndependencies).\n\nWhen this plugin is used you are guaranteed that you will get the same \ndependencies during runtime as you have in development.\n\nPlease note that, if you intend to use this plugin with `liferay-npm-bundler`, \nyou should also use its counterpart \n`liferay-npm-bundler-plugin-namespace-packages` which namespaces `package.json`\ndependencies too.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/babel-plugin-namespace-modules/-/babel-plugin-namespace-modules-2.7.1.tgz#9522c9238e3a0b52da53ffd01797000faadaabfc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/babel-plugin-namespace-modules/-/babel-plugin-namespace-modules-2.7.1.tgz",
    "hash": "9522c9238e3a0b52da53ffd01797000faadaabfc",
    "integrity": "sha512-WcZdSmEdgmU5HXRqxqcYc1Que8S7bMVLkSyuzuTfnxSHCo4lN371YAg2yllsX04PJ5lPZT/KExCA6QqhOp1aXA==",
    "registry": "npm",
    "packageName": "babel-plugin-namespace-modules"
  },
  "registry": "npm",
  "hash": "9522c9238e3a0b52da53ffd01797000faadaabfc"
}