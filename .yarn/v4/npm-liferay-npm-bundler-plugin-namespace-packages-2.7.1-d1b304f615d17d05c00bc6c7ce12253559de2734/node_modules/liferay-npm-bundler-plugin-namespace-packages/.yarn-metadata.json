{
  "manifest": {
    "name": "liferay-npm-bundler-plugin-namespace-packages",
    "version": "2.7.1",
    "description": "A liferay-npm-bundler plugin to namespace package names based on root project's name.",
    "main": "lib/index.js",
    "scripts": {
      "build": "babel --source-maps -D -d lib src",
      "prepublish": "npm run build"
    },
    "devDependencies": {
      "babel-cli": "^6.24.1",
      "babel-preset-es2015": "^6.24.1",
      "read-json-sync": "^2.0.0"
    },
    "dependencies": {
      "liferay-npm-build-tools-common": "2.7.1"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-liferay-npm-bundler-plugin-namespace-packages-2.7.1-d1b304f615d17d05c00bc6c7ce12253559de2734\\node_modules\\liferay-npm-bundler-plugin-namespace-packages\\package.json",
    "readmeFilename": "README.md",
    "readme": "# liferay-npm-bundler-plugin-namespace-packages\n\n> Namespace package names based on the root project's package name and version. \n> This plugin prepends `<project-package-name>$` to each package name appearance \n> in package.json files so that the packages are isolated per project and don't \n> clash.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler-plugin-inject-angular-dependencies\n```\n\n## Usage\n\nAdd the following to your `.npmbundlerrc` file:\n\n**Without options:**\n```json\n{\n\t\"*\": {\n\t\t\"plugins\": [\"namespace-packages\"]\n\t}\n}\n```\n\n## Technical Details\n\nThis plugins rewrites package names in `package.json` files to prepend the root \nproject's name to them. \n\nIn case a module belongs to a scoped package, the root project's name is \nprepended to the scope name not including the `@`. So, for example,\n`@a-scope/a-package` would be converted to `@my-project$a-scope/a-package`.\n\nThis plugin is normally used to sandbox dependencies of a whole project so that\nthey are not shared with any other project. This, of course, disables the \npossibility of deduplication between different portlets, but leads to better \nstability and predictability during runtime (specially when using peer \ndependencies).\n\nWhen this plugin is used you are guaranteed that you will get the same \ndependencies during runtime as during development.\n\nPlease note that, if you intend to use this plugin with `liferay-npm-bundler`, \nyou should also use its counterpart \n`babel-plugin-namespace-modules` which namespaces modules inside AMD `define()` \nand `require()` calls too.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/liferay-npm-bundler-plugin-namespace-packages/-/liferay-npm-bundler-plugin-namespace-packages-2.7.1.tgz#d1b304f615d17d05c00bc6c7ce12253559de2734",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/liferay-npm-bundler-plugin-namespace-packages/-/liferay-npm-bundler-plugin-namespace-packages-2.7.1.tgz",
    "hash": "d1b304f615d17d05c00bc6c7ce12253559de2734",
    "integrity": "sha512-2aIUPKe40frLtNUX6WMNhvC7HBhCgrgJKpFT9ivC2rHd4wu+4Mx0Y0tOYJuF0cemwFqRb2OI9Mq5qsMPnRaSGg==",
    "registry": "npm",
    "packageName": "liferay-npm-bundler-plugin-namespace-packages"
  },
  "registry": "npm",
  "hash": "d1b304f615d17d05c00bc6c7ce12253559de2734"
}