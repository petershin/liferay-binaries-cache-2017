{
  "manifest": {
    "name": "configstore",
    "version": "3.1.2",
    "description": "Easily load and save config without having to think about where and how",
    "license": "BSD-2-Clause",
    "repository": {
      "type": "git",
      "url": "https://github.com/yeoman/configstore.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "test": "xo && ava"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "config",
      "store",
      "storage",
      "conf",
      "configuration",
      "settings",
      "preferences",
      "json",
      "data",
      "persist",
      "persistent",
      "save"
    ],
    "dependencies": {
      "dot-prop": "^4.1.0",
      "graceful-fs": "^4.1.2",
      "make-dir": "^1.0.0",
      "unique-string": "^1.0.0",
      "write-file-atomic": "^2.0.0",
      "xdg-basedir": "^3.0.0"
    },
    "devDependencies": {
      "ava": "*",
      "xo": "*"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-configstore-3.1.2-c6f25defaeef26df12dd33414b001fe81a543f8f\\node_modules\\configstore\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# configstore [![Build Status](https://travis-ci.org/yeoman/configstore.svg?branch=master)](https://travis-ci.org/yeoman/configstore)\n\n> Easily load and persist config without having to think about where and how\n\nConfig is stored in a JSON file located in `$XDG_CONFIG_HOME` or `~/.config`.<br>\nExample: `~/.config/configstore/some-id.json`\n\n*If you need this for Electron, check out [`electron-store`](https://github.com/sindresorhus/electron-store) instead.*\n\n\n## Usage\n\n```js\nconst Configstore = require('configstore');\nconst pkg = require('./package.json');\n\n// create a Configstore instance with an unique ID e.g.\n// Package name and optionally some default values\nconst conf = new Configstore(pkg.name, {foo: 'bar'});\n\nconsole.log(conf.get('foo'));\n//=> 'bar'\n\nconf.set('awesome', true);\nconsole.log(conf.get('awesome'));\n//=> true\n\n// Use dot-notation to access nested properties\nconf.set('bar.baz', true);\nconsole.log(conf.get('bar'));\n//=> {baz: true}\n\nconf.delete('awesome');\nconsole.log(conf.get('awesome'));\n//=> undefined\n```\n\n\n## API\n\n### Configstore(packageName, [defaults], [options])\n\nReturns a new instance.\n\n#### packageName\n\nType: `string`\n\nName of your package.\n\n#### defaults\n\nType: `Object`\n\nDefault config.\n\n#### options\n\n##### globalConfigPath\n\nType: `boolean`<br>\nDefault: `false`\n\nStore the config at `$CONFIG/package-name/config.json` instead of the default `$CONFIG/configstore/package-name.json`. This is not recommended as you might end up conflicting with other tools, rendering the \"without having to think\" idea moot.\n\n### Instance\n\nYou can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a `key` to access nested properties.\n\n### .set(key, value)\n\nSet an item.\n\n### .set(object)\n\nSet multiple items at once.\n\n### .get(key)\n\nGet an item.\n\n### .has(key)\n\nCheck if an item exists.\n\n### .delete(key)\n\nDelete an item.\n\n### .clear()\n\nDelete all items.\n\n### .size\n\nGet the item count.\n\n### .path\n\nGet the path to the config file. Can be used to show the user where the config file is located or even better open it for them.\n\n### .all\n\nGet all the config as an object or replace the current config with an object:\n\n```js\nconf.all = {\n\thello: 'world'\n};\n```\n\n\n## License\n\n[BSD license](http://opensource.org/licenses/bsd-license.php)<br>\nCopyright Google\n",
    "licenseText": "Copyright Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/configstore/-/configstore-3.1.2.tgz#c6f25defaeef26df12dd33414b001fe81a543f8f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/configstore/-/configstore-3.1.2.tgz",
    "hash": "c6f25defaeef26df12dd33414b001fe81a543f8f",
    "integrity": "sha512-vtv5HtGjcYUgFrXc6Kx747B83MRRVS5R1VTEQoXvuP+kMI+if6uywV0nDGoiydJRy4yk7h9od5Og0kxx4zUXmw==",
    "registry": "npm",
    "packageName": "configstore"
  },
  "registry": "npm",
  "hash": "c6f25defaeef26df12dd33414b001fe81a543f8f"
}