{
  "manifest": {
    "name": "stringify-object",
    "version": "2.4.0",
    "description": "Stringify an object/array like JSON.stringify just without all the double-quotes",
    "license": "BSD-2-Clause",
    "repository": {
      "type": "git",
      "url": "https://github.com/yeoman/stringify-object.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "test": "mocha"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "object",
      "stringify",
      "pretty",
      "print",
      "dump",
      "format",
      "type",
      "json"
    ],
    "dependencies": {
      "is-plain-obj": "^1.0.0",
      "is-regexp": "^1.0.0"
    },
    "devDependencies": {
      "mocha": "*"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-stringify-object-2.4.0-c62d11023eb21fe2d9b087be039a26df3b22a09d\\node_modules\\stringify-object\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# stringify-object [![Build Status](https://secure.travis-ci.org/yeoman/stringify-object.svg?branch=master)](http://travis-ci.org/yeoman/stringify-object)\n\n> Stringify an object/array like JSON.stringify just without all the double-quotes.\n\nUseful for when you want to get the string representation of an object in a formatted way.\n\nIt also handles circular references and lets you specify quote type.\n\n\n## Install\n\n```\n$ npm install --save stringify-object\n```\n\n\n## Usage\n\n```js\nvar obj = {\n\tfoo: 'bar',\n\t'arr': [1, 2, 3],\n\tnested: { hello: \"world\" }\n};\n\nvar pretty = stringifyObject(obj, {\n\tindent: '  ',\n\tsingleQuotes: false\n});\n\nconsole.log(pretty);\n/*\n{\n\tfoo: \"bar\",\n\tarr: [\n\t\t1,\n\t\t2,\n\t\t3\n\t],\n\tnested: {\n\t\thello: \"world\"\n\t}\n}\n*/\n```\n\n\n## API\n\n### stringifyObject(input, [options])\n\nCircular references will be replaced with `\"[Circular]\"`.\n\n#### input\n\n*Required*  \nType: `object`, `array`\n\n#### options\n\n##### indent\n\nType: `string`  \nDefault: `'\\t'`\n\nChoose the indentation you prefer.\n\n##### singleQuotes\n\nType: `boolean`  \nDefault: `true`\n\nSet to false to get double-quoted strings.\n\n##### filter(obj, prop)\n\nType: `function`\n\nExpected to return a boolean of whether to keep the object.\n\n##### inlineCharacterLimit\n\nType: `number`\nDefault: undefined\n\nWhen set, will inline values up to `inlineCharacterLimit` length for the sake\nof more terse output.\n\nFor example, given the example at the top of the README:\n\n```js\nvar obj = {\n\tfoo: 'bar',\n\t'arr': [1, 2, 3],\n\tnested: { hello: \"world\" }\n};\n\nvar pretty = stringifyObject(obj, {\n\tindent: '  ',\n\tsingleQuotes: false,\n\tinlineCharacterLimit: 12\n});\n\nconsole.log(pretty);\n/*\n{\n\tfoo: \"bar\",\n\tarr: [1, 2, 3],\n\tnested: {\n\t\thello: \"world\"\n\t}\n}\n*/\n```\n\nAs you can see, `arr` was printed as a one-liner because its string was shorter\nthan 12 characters.\n\n## License\n\n[BSD license](http://opensource.org/licenses/bsd-license.php) Â© Yeoman Team\n",
    "licenseText": "Copyright (c) 2015, Yeoman team\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/stringify-object/-/stringify-object-2.4.0.tgz#c62d11023eb21fe2d9b087be039a26df3b22a09d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/stringify-object/-/stringify-object-2.4.0.tgz",
    "hash": "c62d11023eb21fe2d9b087be039a26df3b22a09d",
    "integrity": "sha1-xi0RAj6yH+LZsIe+A5om3zsioJ0=",
    "registry": "npm",
    "packageName": "stringify-object"
  },
  "registry": "npm",
  "hash": "c62d11023eb21fe2d9b087be039a26df3b22a09d"
}