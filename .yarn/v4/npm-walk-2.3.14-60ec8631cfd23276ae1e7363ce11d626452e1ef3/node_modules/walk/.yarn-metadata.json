{
  "manifest": {
    "name": "walk",
    "description": "A node port of python's os.walk",
    "url": "http://git.coolaj86.com/coolaj86/fs-walk.js",
    "keywords": [
      "util",
      "os",
      "sys",
      "fs",
      "walk",
      "walkSync"
    ],
    "author": {
      "name": "AJ ONeal",
      "email": "coolaj86@gmail.com"
    },
    "contributors": [],
    "dependencies": {
      "foreachasync": "^3.0.0"
    },
    "lib": ".",
    "main": "./lib/walk.js",
    "version": "2.3.14",
    "files": [
      "lib"
    ],
    "repository": {
      "url": "https://git.coolaj86.com/coolaj86/fs-walk.js.git"
    },
    "license": "(MIT OR Apache-2.0)",
    "bugs": {
      "url": "https://git.coolaj86.com/coolaj86/fs-walk.js/issues"
    },
    "homepage": "https://git.coolaj86.com/coolaj86/fs-walk.js",
    "devDependencies": {},
    "scripts": {
      "test": "./test/walk-test.sh"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-walk-2.3.14-60ec8631cfd23276ae1e7363ce11d626452e1ef3\\node_modules\\walk\\package.json",
    "readmeFilename": "README.md",
    "readme": "node-walk\n====\n\n| Sponsored by [ppl](https://ppl.family)\n\nnodejs walk implementation.\n\nThis is somewhat of a port python's `os.walk`, but using Node.JS conventions.\n\n  * EventEmitter\n  * Asynchronous\n  * Chronological (optionally)\n  * Built-in flow-control\n  * includes Synchronous version (same API as Asynchronous)\n\nAs few file descriptors are opened at a time as possible.\nThis is particularly well suited for single hard disks which are not flash or solid state.\n\nInstallation\n----\n\n```bash\nnpm install --save walk\n```\n\nGetting Started\n====\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk');\n  var fs = require('fs');\n  var walker;\n\n  walker = walk.walk(\"/tmp\", options);\n\n  walker.on(\"file\", function (root, fileStats, next) {\n    fs.readFile(fileStats.name, function () {\n      // doStuff\n      next();\n    });\n  });\n\n  walker.on(\"errors\", function (root, nodeStatsArray, next) {\n    next();\n  });\n\n  walker.on(\"end\", function () {\n    console.log(\"all done\");\n  });\n}());\n```\n\nCommon Events\n-----\n\nAll single event callbacks are in the form of `function (root, stat, next) {}`.\n\nAll multiple event callbacks callbacks are in the form of `function (root, stats, next) {}`, except **names** which is an array of strings.\n\nAll **error** event callbacks are in the form `function (root, stat/stats, next) {}`.\n**`stat.error`** contains the error.\n\n* `names`\n* `directory`\n* `directories`\n* `file`\n* `files`\n* `end`\n* `nodeError` (`stat` failed)\n* `directoryError` (`stat` succedded, but `readdir` failed)\n* `errors` (a collection of any errors encountered)\n\n\nA typical `stat` event looks like this:\n\n```javascript\n{ dev: 16777223,\n  mode: 33188,\n  nlink: 1,\n  uid: 501,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 49868100,\n  size: 5617,\n  blocks: 16,\n  atime: Mon Jan 05 2015 18:18:10 GMT-0700 (MST),\n  mtime: Thu Sep 25 2014 21:21:28 GMT-0600 (MDT),\n  ctime: Thu Sep 25 2014 21:21:28 GMT-0600 (MDT),\n  birthtime: Thu Sep 25 2014 21:21:28 GMT-0600 (MDT),\n  name: 'README.md',\n  type: 'file' }\n```\n\nAdvanced Example\n====\n\nBoth Asynchronous and Synchronous versions are provided.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk');\n  var fs = require('fs');\n  var options;\n  var walker;\n\n  options = {\n    followLinks: false\n    // directories with these keys will be skipped\n  , filters: [\"Temp\", \"_Temp\"]\n  };\n\n  walker = walk.walk(\"/tmp\", options);\n\n  // OR\n  // walker = walk.walkSync(\"/tmp\", options);\n\n  walker.on(\"names\", function (root, nodeNamesArray) {\n    nodeNamesArray.sort(function (a, b) {\n      if (a > b) return 1;\n      if (a < b) return -1;\n      return 0;\n    });\n  });\n\n  walker.on(\"directories\", function (root, dirStatsArray, next) {\n    // dirStatsArray is an array of `stat` objects with the additional attributes\n    // * type\n    // * error\n    // * name\n\n    next();\n  });\n\n  walker.on(\"file\", function (root, fileStats, next) {\n    fs.readFile(fileStats.name, function () {\n      // doStuff\n      next();\n    });\n  });\n\n  walker.on(\"errors\", function (root, nodeStatsArray, next) {\n    next();\n  });\n\n  walker.on(\"end\", function () {\n    console.log(\"all done\");\n  });\n}());\n```\n\n### Sync\n\nNote: You **can't use EventEmitter** if you want truly synchronous walker\n(although it's synchronous under the hood, it appears not to be due to the use of `process.nextTick()`).\n\nInstead **you must use `options.listeners`** for truly synchronous walker.\n\nAlthough the sync version uses all of the `fs.readSync`, `fs.readdirSync`, and other sync methods,\nI don't think I can prevent the `process.nextTick()` that `EventEmitter` calls.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk');\n  var fs = require('fs');\n  var options;\n  var walker;\n\n  // To be truly synchronous in the emitter and maintain a compatible api,\n  // the listeners must be listed before the object is created\n  options = {\n    listeners: {\n      names: function (root, nodeNamesArray) {\n        nodeNamesArray.sort(function (a, b) {\n          if (a > b) return 1;\n          if (a < b) return -1;\n          return 0;\n        });\n      }\n    , directories: function (root, dirStatsArray, next) {\n        // dirStatsArray is an array of `stat` objects with the additional attributes\n        // * type\n        // * error\n        // * name\n\n        next();\n      }\n    , file: function (root, fileStats, next) {\n        fs.readFile(fileStats.name, function () {\n          // doStuff\n          next();\n        });\n      }\n    , errors: function (root, nodeStatsArray, next) {\n        next();\n      }\n    }\n  };\n\n  walker = walk.walkSync(\"/tmp\", options);\n\n  console.log(\"all done\");\n}());\n```\n\nAPI\n====\n\nEmitted Values\n\n  * `on('XYZ', function(root, stats, next) {})`\n\n  * `root` - the containing the files to be inspected\n  * *stats[Array]* - a single `stats` object or an array with some added attributes\n    * type - 'file', 'directory', etc\n    * error\n    * name - the name of the file, dir, etc\n  * next - no more files will be read until this is called\n\nSingle Events - fired immediately\n\n  * `end` - No files, dirs, etc left to inspect\n\n  * `directoryError` - Error when `fstat` succeeded, but reading path failed (Probably due to permissions).\n  * `nodeError` - Error `fstat` did not succeeded.\n  * `node` - a `stats` object for a node of any type\n  * `file` - includes links when `followLinks` is `true`\n  * `directory` - **NOTE** you could get a recursive loop if `followLinks` and a directory links to its parent\n  * `symbolicLink` - always empty when `followLinks` is `true`\n  * `blockDevice`\n  * `characterDevice`\n  * `FIFO`\n  * `socket`\n\nEvents with Array Arguments - fired after all files in the dir have been `stat`ed\n\n  * `names` - before any `stat` takes place. Useful for sorting and filtering.\n    * Note: the array is an array of `string`s, not `stat` objects\n    * Note: the `next` argument is a `noop`\n\n  * `errors` - errors encountered by `fs.stat` when reading ndes in a directory\n  * `nodes` - an array of `stats` of any type\n  * `files`\n  * `directories` - modification of this array - sorting, removing, etc - affects traversal\n  * `symbolicLinks`\n  * `blockDevices`\n  * `characterDevices`\n  * `FIFOs`\n  * `sockets`\n\n**Warning** beware of infinite loops when `followLinks` is true (using `walk-recurse` varient).\n\nComparisons\n====\n\nTested on my `/System` containing 59,490 (+ self) directories (and lots of files).\nThe size of the text output was 6mb.\n\n`find`:\n    time bash -c \"find /System -type d | wc\"\n    59491   97935 6262916\n\n    real  2m27.114s\n    user  0m1.193s\n    sys 0m14.859s\n\n`find.js`:\n\nNote that `find.js` omits the start directory\n\n    time bash -c \"node examples/find.js /System -type d | wc\"\n    59490   97934 6262908\n\n    # Test 1\n    real  2m52.273s\n    user  0m20.374s\n    sys 0m27.800s\n\n    # Test 2\n    real  2m23.725s\n    user  0m18.019s\n    sys 0m23.202s\n\n    # Test 3\n    real  2m50.077s\n    user  0m17.661s\n    sys 0m24.008s\n\nIn conclusion node.js asynchronous walk is much slower than regular \"find\".\n\nLICENSE\n===\n\n`node-walk` is available under the following licenses:\n\n  * MIT\n  * Apache 2\n\nCopyright 2011 - Present AJ ONeal\n",
    "licenseText": "Copyright 2011 AJ ONeal\n\nThis is open source software; you can redistribute it and/or modify it under the\nterms of either:\n\n   a) the \"MIT License\"\n   b) the \"Apache-2.0 License\"\n\nMIT License\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\nApache-2.0 License Summary\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/walk/-/walk-2.3.14.tgz#60ec8631cfd23276ae1e7363ce11d626452e1ef3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/walk/-/walk-2.3.14.tgz",
    "hash": "60ec8631cfd23276ae1e7363ce11d626452e1ef3",
    "integrity": "sha512-5skcWAUmySj6hkBdH6B6+3ddMjVQYH5Qy9QGbPmN8kVmLteXk+yVXg+yfk1nbX30EYakahLrr8iPcCxJQSCBeg==",
    "registry": "npm",
    "packageName": "walk"
  },
  "registry": "npm",
  "hash": "60ec8631cfd23276ae1e7363ce11d626452e1ef3"
}