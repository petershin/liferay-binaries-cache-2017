{
  "manifest": {
    "name": "typescript-eslint-parser",
    "description": "An Esprima-style parser for TypeScript",
    "author": {
      "name": "Nicholas C. Zakas",
      "email": "nicholas+npm@nczconsulting.com"
    },
    "homepage": "https://github.com/eslint/typescript-eslint-parser",
    "main": "parser.js",
    "version": "16.0.1",
    "files": [
      "lib",
      "parser.js"
    ],
    "engines": {
      "node": ">=6.14.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/eslint/typescript-eslint-parser.git"
    },
    "bugs": {
      "url": "https://github.com/eslint/typescript-eslint-parser/issues"
    },
    "license": "BSD-2-Clause",
    "devDependencies": {
      "babel-code-frame": "6.26.0",
      "babylon": "7.0.0-beta.39",
      "eslint": "4.19.1",
      "eslint-config-eslint": "4.0.0",
      "eslint-plugin-node": "6.0.1",
      "eslint-release": "0.11.1",
      "glob": "7.1.2",
      "jest": "23.1.0",
      "lodash.isplainobject": "4.0.6",
      "npm-license": "0.3.3",
      "shelljs": "0.8.2",
      "shelljs-nodecli": "0.1.1",
      "typescript": "~2.9.1"
    },
    "keywords": [
      "ast",
      "ecmascript",
      "javascript",
      "typescript",
      "parser",
      "syntax",
      "eslint"
    ],
    "scripts": {
      "test": "node Makefile.js test && npm run ast-alignment-tests",
      "jest": "jest",
      "ast-alignment-tests": "jest --config=./tests/ast-alignment/jest.config.js",
      "integration-tests": "docker-compose -f tests/integration/docker-compose.yml up",
      "kill-integration-test-containers": "docker-compose -f tests/integration/docker-compose.yml down -v --rmi local",
      "lint": "node Makefile.js lint",
      "release": "eslint-release",
      "ci-release": "eslint-ci-release",
      "gh-release": "eslint-gh-release",
      "alpharelease": "eslint-prerelease alpha",
      "betarelease": "eslint-prerelease beta"
    },
    "dependencies": {
      "lodash.unescape": "4.0.1",
      "semver": "5.5.0"
    },
    "peerDependencies": {
      "typescript": "*"
    },
    "jest": {
      "testRegex": "tests/lib/.+\\.js$",
      "testPathIgnorePatterns": [],
      "collectCoverage": true,
      "coverageReporters": [
        "text-summary"
      ]
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-typescript-eslint-parser-16.0.1-b40681c7043b222b9772748b700a000b241c031b\\node_modules\\typescript-eslint-parser\\package.json",
    "readmeFilename": "README.md",
    "readme": "# TypeScript ESLint Parser\n\nA parser that converts TypeScript source code into an [ESTree](https://github.com/estree/estree)-compatible form.\n\n## Usage\n\nThis parser is actually somewhat generic and robust - it could be used to power any use-case which requires taking TypeScript source code and producing an ESTree-compatiable AST.\n\nIn fact, that is exactly what it is used for in the popular open-source code formatter, [Prettier](https://prettier.io), to power its TypeScript support.\n\nNevertheless, the parser does have a special appreciation for ESLint-specific use-cases built in, and can even produce a slightly different AST for ESLint if needed (using the special `parseForESLint()` method).\n\nThe majority of users of this parser use it to enable them to use ESLint on their TypeScript source files, so they will not actually be interacting with the parser directly. Instead they will configure ESLint to use it instead of its default parser, [espree](https://github.com/eslint/espree), which does not understand TypeScript.\n\n## Usage with ESLint\n\nThere is sometimes an incorrect assumption that the parser itself is what does everything necessary to facilitate the use of ESLint with TypeScript. In actuality, it is the combination of the parser _and_ one or more plugins which allow you to maximize your usage of ESLint with TypeScript.\n\nFor example, once this parser successfully produces an AST for the TypeScript source code, it might well contain some information which simply does not exist in a standard JavaScript context, such as the data for a TypeScript-specific construct, like an `interface`.\n\nThe core rules built into ESLint, such as `indent` have no knowledge of such constructs, so it is impossible to expect them to work out of the box with them.\n\nInstead, you also need to make use of one more plugins which will add or extend rules with TypeScript-specific features.\n\nBy far the most common case will be installing the [eslint-plugin-typescript](https://github.com/nzakas/eslint-plugin-typescript) plugin, but there are also other relevant options available such a [eslint-plugin-tslint](https://github.com/JamesHenry/eslint-plugin-tslint).\n\nInstall:\n\n```sh\nnpm install --save-dev typescript-eslint-parser\n```\n\nAnd in your ESLint configuration file:\n\n```json\n\"parser\": \"typescript-eslint-parser\"\n```\n\n## Supported TypeScript Version\n\nWe will always endeavor to support the latest stable version of TypeScript.\n\nThe version of TypeScript currently supported by this parser is `~2.9.1`. This is reflected in the `devDependency` requirement within the package.json file, and it is what the tests will be run against. We have an open `peerDependency` requirement in order to allow for experimentation on newer/beta versions of TypeScript.\n\nIf you use a non-supported version of TypeScript, the parser will log a warning to the console.\n\n**Please ensure that you are using a supported version before submitting any issues/bug reports.**\n\n## Help Wanted!\n\nIf you're familiar with TypeScript and ESLint, and you'd like to see this project progress, please consider contributing. We need people with a good knowledge of TypeScript to ensure this parser is useful.\n\n## Reporting Issues\n\nThe vast majority of issues which are submitted here are not actually parsing bugs at all. They are integration issues with the ESLint ecosystem.\n\nThis is not ideal, but users need a place to be able to report those things, so it has become accepted that that will also be done in this repo.\n\nPlease check the current list of open and known issues and ensure the issue has not been reported before. When creating a new issue provide as much information about your environment as possible. This includes:\n - ESLint Version\n - TypeScript version\n - The `typescript-eslint-parser` version\n - ESLint config or rules and plugins currently enabled\n\n## Integration Tests\n\nWe have a very flexible way of running integration tests which connects all of the moving parts of the usage of this parser in the ESLint ecosystem.\n\nWe run each test within its own docker container, and so each one has complete autonomy over what dependencies/plugins are installed and what versions are used. This also has the benefit of not bloating the `package.json` and `node_modules` of the parser project itself.\n\n> If you are going to submit an issue related to the usage of this parser with ESLint, please consider creating a failing integration which clearly demonstrates the behavior. It's honestly super quick!\n\nYou just need to duplicate on of the existing test sub-directories found in `tests/integration/`, tweak the dependencies and ESLint config to match what you need, and add a new entry to the docker-compose.yml file which matches the format of the existing ones.\n\nThen run:\n\n```sh\nnpm run integration-tests\n```\n\nIf you ever need to change what gets installed when the docker images are built by docker-compose, you will first need to kill the existing containers by running:\n\n```sh\nnpm run kill-integration-test-containers\n```\n\n## Contributing\n\nIssues and pull requests will be triaged and responded to as quickly as possible. We operate under the [ESLint Contributor Guidelines](http://eslint.org/docs/developer-guide/contributing), so please be sure to read them before contributing. If you're not sure where to dig in, check out the [issues](https://github.com/eslint/typescript-eslint-parser/issues).\n\n## Build Commands\n\n* `npm test` - run all linting and tests\n* `npm run lint` - run all linting\n* `npm run ast-alignment-tests` - run only Babylon AST alignment tests\n* `npm run integration-tests` - run only integration tests\n\n## License\n\nTypeScript ESLint Parser is licensed under a permissive BSD 2-clause license.\n",
    "licenseText": "TypeScript ESLint Parser\nCopyright JS Foundation and other contributors, https://js.foundation\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/typescript-eslint-parser/-/typescript-eslint-parser-16.0.1.tgz#b40681c7043b222b9772748b700a000b241c031b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/typescript-eslint-parser/-/typescript-eslint-parser-16.0.1.tgz",
    "hash": "b40681c7043b222b9772748b700a000b241c031b",
    "integrity": "sha512-IKawLTu4A2xN3aN/cPLxvZ0bhxZHILGDKTZWvWNJ3sLNhJ3PjfMEDQmR2VMpdRPrmWOadgWXRwjLBzSA8AGsaQ==",
    "registry": "npm",
    "packageName": "typescript-eslint-parser"
  },
  "registry": "npm",
  "hash": "b40681c7043b222b9772748b700a000b241c031b"
}