{
  "manifest": {
    "name": "@babel/template",
    "version": "7.0.0-beta.44",
    "description": "Generate an AST from a string template.",
    "author": {
      "name": "Sebastian McKenzie",
      "email": "sebmck@gmail.com"
    },
    "homepage": "https://babeljs.io/",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/babel/babel/tree/master/packages/babel-template"
    },
    "main": "lib/index.js",
    "dependencies": {
      "@babel/code-frame": "7.0.0-beta.44",
      "@babel/types": "7.0.0-beta.44",
      "babylon": "7.0.0-beta.44",
      "lodash": "^4.2.0"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-@babel-template-7.0.0-beta.44-f8832f4fdcee5d59bf515e595fc5106c529b394f\\node_modules\\@babel\\template\\package.json",
    "readmeFilename": "README.md",
    "readme": "# @babel/template\n\n> Generate an AST from a string template or template literal.\n\nIn computer science, this is known as an implementation of quasiquotes.\n\n## Install\n\n```sh\nnpm install --save-dev @babel/template\n```\n\n## String Usage\n\n```js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n  SOURCE: t.stringLiteral(\"my-module\")\n});\n\nconsole.log(generate(ast).code);\n```\n\n```js\nconst myModule = require(\"my-module\");\n```\n\n### `.ast`\n\nIf no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the `.ast` version of the template.\n\n```js\nconst ast = template.ast(`\n  var myModule = require(\"my-module\");\n`);\n```\nwhich will parse and return the AST directly.\n\n\n## Template Literal Usage\n\n```js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst fn = template`\n  var IMPORT_NAME = require('${\"my-module\"}');\n`);\n\nconst ast = fn({\n  IMPORT_NAME: t.identifier(\"myModule\");\n});\n\nconsole.log(generate(ast).code);\n```\n\nNote that placeholders can be passed directly as part of the template literal\nin order to make things as readable as possible, or they can be passed into\nthe template function.\n\n### `.ast`\n\nIf no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the `.ast` version of the template.\n\n```js\nconst name = \"my-module\";\nconst mod = \"myModule\";\n\nconst ast = template.ast`\n  var ${mod} = require(\"${name}\");\n`;\n```\nwhich will parse and return the AST directly. Note that unlike the string-based\nversion mentioned earlier, since this is a template literal, it is still\nvalid to perform replacements using template literal replacements.\n\n\n## AST results\n\nThe `@babel/template` API exposes a few flexible APIs to make it as easy as\npossible to create ASTs with an expected structure. Each of these also has\nthe `.ast` property mentioned above.\n\n### `template`\n\n`template` returns either a single statement, or an array of\nstatements, depending on the parsed result.\n\n### `template.smart`\n\nThis is the same as the default `template` API, returning either a single\nnode, or an array of nodes, depending on the parsed result.\n\n### `template.statement`\n\n`template.statement(\"foo;\")()` returns a single statement node, and throw\nan exception if the result is anything but a single statement.\n\n### `template.statements`\n\n`template.statements(\"foo;foo;\")()` returns an array of statement nodes.\n\n### `template.expression`\n\n`template.expression(\"foo\")()` returns the expression node.\n\n### `template.program`\n\n`template.program(\"foo;\")()` returns the `Program` node for the template.\n\n\n## API\n\n### `template(code, [opts])`\n\n#### code\n\nType: `string`\n\n#### options\n\n`@babel/template` accepts all of the options from [babylon](https://github.com/babel/babel/tree/master/packages/babylon), and specifies\nsome defaults of its own:\n\n* `allowReturnOutsideFunction` is set to `true` by default.\n* `allowSuperOutsideMethod` is set to `true` by default.\n* `sourceType` is set to `module` by default.\n\n##### placeholderWhitelist\n\nType: `Set<string>`\nDefault: `undefined`\n\nA set of placeholder names to automatically accept. Items in this list do\nnot need to match the given placeholder pattern.\n\n##### placeholderPattern\n\nType: `RegExp | false`\nDefault: `/^[_$A-Z0-9]+$/`\n\nA pattern to search for when looking for Identifier and StringLiteral\nnodes that should be considered placeholders.\n'false' will disable placeholder searching entirely, leaving only the\n'placeholderWhitelist' value to find placeholders.\n\n##### preserveComments\n\nType: `boolean`\nDefault: `false`\n\nSet this to `true` to preserve any comments from the `code` parameter.\n\n#### Return value\n\nBy default `@babel/template` returns a `function` which is invoked with an\noptional object of replacements. See the usage section for an example.\n\nWhen using `.ast`, the AST will be returned directly.\n\n[babylon]: https://github.com/babel/babylon#options\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@babel/template/-/template-7.0.0-beta.44.tgz#f8832f4fdcee5d59bf515e595fc5106c529b394f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@babel/template/-/template-7.0.0-beta.44.tgz",
    "hash": "f8832f4fdcee5d59bf515e595fc5106c529b394f",
    "integrity": "sha512-w750Sloq0UNifLx1rUqwfbnC6uSUk0mfwwgGRfdLiaUzfAOiH0tHJE6ILQIUi3KYkjiCDTskoIsnfqZvWLBDng==",
    "registry": "npm",
    "packageName": "@babel/template"
  },
  "registry": "npm",
  "hash": "f8832f4fdcee5d59bf515e595fc5106c529b394f"
}