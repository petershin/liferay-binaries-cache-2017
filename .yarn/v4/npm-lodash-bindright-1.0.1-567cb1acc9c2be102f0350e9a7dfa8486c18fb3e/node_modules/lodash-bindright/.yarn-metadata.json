{
  "manifest": {
    "name": "lodash-bindright",
    "version": "1.0.1",
    "description": "My polished module",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/natecavanaugh/lodash-bindright.git"
    },
    "author": {
      "name": "Nate Cavanaugh",
      "email": "nate@shift22.com",
      "url": "alterform.com"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "test": "gulp test-coverage",
      "coveralls": "gulp coveralls"
    },
    "keywords": [
      ""
    ],
    "dependencies": {
      "lodash": "^3.10.1"
    },
    "devDependencies": {
      "mocha": "*",
      "chai": "*",
      "chai-string": "*",
      "coveralls": "*",
      "gulp-coveralls": "*",
      "gulp-istanbul": "*",
      "istanbul": "*",
      "sinon": "*",
      "gulp": "*",
      "gulp-load-plugins": "*",
      "gulp-help": "*",
      "run-sequence": "*",
      "gulp-mocha": "*"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-lodash-bindright-1.0.1-567cb1acc9c2be102f0350e9a7dfa8486c18fb3e\\node_modules\\lodash-bindright\\package.json",
    "readmeFilename": "README.md",
    "readme": "# lodash-bindright\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> Like lodash.bind and .bindKey, but arguments to the right\n\nBy default, almost all `.bind` methods, whether the native `Function.prototype.bind` or lodash's `_.bind` and `_.bindKey`, allow you to pass arguments to the bound function, but when the function executes, the arguments you passed to `bind` are the starting arguments.\n\nWhat this does is allow you to pass arguments to `_.bind` and `_.bindKey`, and when the function executes, they will be added after whatever arguments are passed at execution time.\n\nHere's an example comparing them:\n\n```js\nfunction log(msg, level) {\n\tconsole.log(msg, level);\n}\n\n// Regular bind\nvar logBind = _.bind(log, obj, 'info');\n\n// bindRight\nvar logBindRight = _.bindRight(log, obj, 'info');\n\nlogBind('something');\n//=> info something\n\nlogBindRight('something');\n//=> something info\n```\n\nWhy is this useful? Mainly for when you want your function to be able to accept optional arguments.\n\nA common use case I had for it was when I wanted to use a function as an event listener, but in some cases pre-define the optional argument. Like so:\n\n```js\nvar toggle = function(event, state) {\n\tstate = state || 'open';\n\t$(event.currentTarget).addClass(state);\n}\n\nvar close = _.bindRight(obj, toggle, 'close');\n\n$('#foo').on('click', close);\n$('#bar').on('click', toggle);\n```\n\nWhen `#foo` is clicked, the `state` will be set as `close`, but when `#bar` is clicked, it will default to `open`.\nThis is somewhat contrived, but it came up more often than using bind with the predefined arguments at the front.\n\n## Install\n\n```\n$ npm install --save lodash-bindright\n```\n\n\n## Usage\n\n```js\nvar _ = require('lodash-bindright')();\n\n// or, providing your own lodash object\nvar _ = require('lodash-bindright')(require('lodash'));\n\nvar myObj = {\n\tlog: function() {\n\t\tconsole.log(this, arguments);\n\t}\n};\n\nvar someOtherObj = {};\n\nvar logFn = _.bindRight(myObj.log, someOtherObj, 'hello', 'world');\n\nlogFn('test');\n//=> someOtherObj, ['test', 'hello', 'world']\n\nvar logFn = _.bindKeyRight(myObj, 'log', 'hello', 'world');\n\nlogFn('test');\n//=> myObj, ['test', 'hello', 'world']\n```\n\n\n## API\n\n### _.bindRight(fn, context, [args])\nThis method takes the same arguments as [_.bind](https://lodash.com/docs#bind)\n\n### _.bindKeyRight(context, key, [args])\nThis method takes the same arguments as [_.bind](https://lodash.com/docs#bindKey)\n\n## License\n\nMIT Â© [Nate Cavanaugh](http://alterform.com)\n\n[npm-image]: https://img.shields.io/npm/v/lodash-bindright.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/lodash-bindright\n[travis-image]: https://img.shields.io/travis/natecavanaugh/lodash-bindright/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/natecavanaugh/lodash-bindright\n[coveralls-image]: https://img.shields.io/coveralls/natecavanaugh/lodash-bindright/master.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/natecavanaugh/lodash-bindright?branch=master",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Nate Cavanaugh <nate@shift22.com> (alterform.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/lodash-bindright/-/lodash-bindright-1.0.1.tgz#567cb1acc9c2be102f0350e9a7dfa8486c18fb3e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/lodash-bindright/-/lodash-bindright-1.0.1.tgz",
    "hash": "567cb1acc9c2be102f0350e9a7dfa8486c18fb3e",
    "integrity": "sha1-VnyxrMnCvhAvA1Dpp9+oSGwY+z4=",
    "registry": "npm",
    "packageName": "lodash-bindright"
  },
  "registry": "npm",
  "hash": "567cb1acc9c2be102f0350e9a7dfa8486c18fb3e"
}