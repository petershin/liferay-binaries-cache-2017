{
  "manifest": {
    "name": "liferay-css-parse",
    "version": "1.7.1",
    "description": "Liferay fork of CSS parser",
    "keywords": [
      "css",
      "parser",
      "stylesheet"
    ],
    "author": {
      "name": "TJ Holowaychuk",
      "email": "tj@vision-media.ca"
    },
    "license": "MIT",
    "devDependencies": {
      "mocha": "*",
      "should": "*",
      "matcha": "~0.4.0",
      "bytes": "~0.2.1"
    },
    "main": "index",
    "repository": {
      "type": "git",
      "url": "https://github.com/visionmedia/css-parse.git"
    },
    "scripts": {
      "test": "make test"
    },
    "files": [
      "index.js"
    ],
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-liferay-css-parse-1.7.1-c0750cc0f0645d2190eeefee845b6fcb154f3e45\\node_modules\\liferay-css-parse\\package.json",
    "readmeFilename": "Readme.md",
    "readme": "# css-parse [![Build Status](https://travis-ci.org/visionmedia/css-parse.png)](https://travis-ci.org/visionmedia/css-parse)\n\n  JavaScript CSS parser for nodejs and the browser.\n\n## Installation\n\n  $ npm install css-parse\n\n## Usage\n\n````javascript\nvar parse = require('css-parse');\n\n// CSS input string\nvar css = \"body { \\n background-color: #fff;\\n }\";\n\nvar output_obj = parse(css);\n\n// Position and Filename parameters\nvar output_obj_pos = parse(css, { position: true, filename: 'file.css' });\n\n// Print parsed object as CSS string\nconsole.log(JSON.stringify(output_obj, null, 2));\n\n````\n\n## API\n\n### var ast = parse(css, [options])\n\n`options`:\n\n- `filename` - recommended for debugging\n- `position` - `true` by default.\n\n### Errors\n\nErrors will have `err.position` where `position` is:\n\n- `start` - start line and column numbers\n- `end` - end line and column numbers\n- `filename` - filename if passed to options\n- `source` - source CSS string\n\nIf you create any errors in plugins such as in [rework](https://github.com/visionmedia/rework), you __must__ set the `position` as well for consistency.\n\n## Example\n\ncss:\n\n```css\nbody {\n  background: #eee;\n  color: #888;\n}\n```\n\nparse tree:\n\n```json\n{\n  \"type\": \"stylesheet\",\n  \"stylesheet\": {\n    \"rules\": [\n      {\n        \"type\": \"rule\",\n        \"selectors\": [\n          \"body\"\n        ],\n        \"declarations\": [\n          {\n            \"type\": \"declaration\",\n            \"property\": \"background\",\n            \"value\": \"#eee\"\n          },\n          {\n            \"type\": \"declaration\",\n            \"property\": \"color\",\n            \"value\": \"#888\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nparse tree with `.position` enabled:\n\n```json\n{\n  \"type\": \"stylesheet\",\n  \"stylesheet\": {\n    \"rules\": [\n      {\n        \"type\": \"rule\",\n        \"selectors\": [\n          \"body\"\n        ],\n        \"declarations\": [\n          {\n            \"type\": \"declaration\",\n            \"property\": \"background\",\n            \"value\": \"#eee\",\n            \"position\": {\n              \"start\": {\n                \"line\": 3,\n                \"column\": 3\n              },\n              \"end\": {\n                \"line\": 3,\n                \"column\": 19\n              }\n            }\n          },\n          {\n            \"type\": \"declaration\",\n            \"property\": \"color\",\n            \"value\": \"#888\",\n            \"position\": {\n              \"start\": {\n                \"line\": 4,\n                \"column\": 3\n              },\n              \"end\": {\n                \"line\": 4,\n                \"column\": 14\n              }\n            }\n          }\n        ],\n        \"position\": {\n          \"start\": {\n            \"line\": 2,\n            \"column\": 1\n          },\n          \"end\": {\n            \"line\": 5,\n            \"column\": 2\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\nIf you also pass in `filename: 'path/to/original.css'`, that will be set\non `node.position.filename`.\n\n## Performance\n\n  Parsed 15,000 lines of CSS (2mb) in 40ms on my macbook air.\n\n## Related\n\n  [css-stringify](https://github.com/visionmedia/css-stringify \"CSS-Stringify\")\n  [css-value](https://github.com/visionmedia/css-value \"CSS-Value\")\n\n## License\n\n  MIT\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2013 TJ Holowaychuk <tj@vision-media.ca>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/liferay-css-parse/-/liferay-css-parse-1.7.1.tgz#c0750cc0f0645d2190eeefee845b6fcb154f3e45",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/liferay-css-parse/-/liferay-css-parse-1.7.1.tgz",
    "hash": "c0750cc0f0645d2190eeefee845b6fcb154f3e45",
    "integrity": "sha1-wHUMwPBkXSGQ7u/uhFtvyxVPPkU=",
    "registry": "npm",
    "packageName": "liferay-css-parse"
  },
  "registry": "npm",
  "hash": "c0750cc0f0645d2190eeefee845b6fcb154f3e45"
}