{
  "manifest": {
    "name": "liferay-npm-scripts",
    "version": "1.5.1",
    "description": "Collection of NPM scripts used for Liferay portlets",
    "main": "index.js",
    "author": {
      "name": "Bryce Osterhaus"
    },
    "license": "MIT",
    "files": [
      "bin",
      "src"
    ],
    "bin": {
      "liferay-npm-scripts": "./bin/liferay-npm-scripts.js"
    },
    "dependencies": {
      "@babel/cli": "^7.2.3",
      "@babel/preset-env": "^7.4.2",
      "check-source-formatting": "2.0.14",
      "cross-env": "^5.2.0",
      "cross-spawn": "^6.0.5",
      "deepmerge": "^3.0.0",
      "glob": "^7.1.3",
      "inquirer": "^6.2.1",
      "jest": "^24.5.0",
      "liferay-jest-junit-reporter": "1.0.1",
      "liferay-npm-bridge-generator": "2.7.1",
      "liferay-npm-bundler": "2.7.1",
      "liferay-npm-bundler-preset-liferay-dev": "1.1.7",
      "liferay-theme-tasks": "9.1.1",
      "metal-tools-soy": "4.3.2",
      "minimist": "^1.2.0",
      "rimraf": "^2.6.2",
      "sort-keys": "^2.0.0"
    },
    "scripts": {
      "preversion": "cd ../.. && yarn ci",
      "test": "jest"
    },
    "jest": {
      "testRegex": [
        "/__tests__/.*"
      ]
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-liferay-npm-scripts-1.5.1-95628e0223cd2f29051b27f2ea32c2fc3bcfe9bc\\node_modules\\liferay-npm-scripts\\package.json",
    "readmeFilename": "README.md",
    "readme": "# liferay-npm-scripts\n\n## Usage\n\n```sh\nnpm install --save-dev liferay-npm-scripts\n```\n\n`package.json`\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build\": \"liferay-npm-scripts build\",\n\t\t\"eject\": \"liferay-npm-scripts eject\"\n\t}\n}\n```\n\n## Scripts Available\n\n### build\n\nBuild script that compiles all necessary javascript, soy, and bundles it together using `liferay-npm-bundler`.\n\n```sh\nliferay-npm-scripts build\n```\n\nDo you have soy dependencies? `build` should automatically detect them.\n\nDo you need to use `liferay-npm-bridge-generator`? Just add a `.npmbridgerc` file and follow the configuration options [here](https://github.com/liferay/liferay-npm-build-tools/wiki/How-to-use-liferay-npm-bridge-generator).\n\n### lint\n\n```sh\nliferay-npm-scripts lint\n```\n\nLint calls `check-source-formatting` for the globs specified in [liferay-npm-scripts](./src/config/liferay-npm-scripts.json#L14-L20).\n\n### format\n\n```sh\nliferay-npm-scripts format\n```\n\nFormat calls `check-source-formatting` with the `--inline-edit` flag for the globs specified in your `.liferaynpmscriptsrc` configuration. Or defaults seen [here](./src/config/liferay-npm-scripts.json#L7-L13).\n\n### test\n\n```sh\nliferay-npm-scripts test\n```\n\nRuns `jest` with a default configuration specified in [jest.json](./src/config/jest.json). You can override or add any additional configuration by following jest documentaion.\n\nAdditionally if you want to use any flags for jest, such as `--watch` you can do so.\n\nFor example\n\n```sh\nliferay-npm-scripts test --watch\n```\n\n### theme\n\n```sh\nliferay-npm-scripts theme TASK\n```\n\nInside a theme directory, runs one of the [available Gulp tasks](https://github.com/liferay/liferay-js-themes-toolkit/tree/master/packages/liferay-theme-tasks#available-tasks), `TASK`, from [liferay-theme-tasks](https://github.com/liferay/liferay-js-themes-toolkit/tree/master/packages/liferay-theme-tasks), automatically passing settings for use inside [liferay-portal](https://github.com/liferay/liferay-portal).\n\nFor example:\n\n```sh\nliferay-npm-scripts theme build\n```\n\nRuns the \"build\" task, providing it with the configuration it needs to find core dependencies such as the [`liferay-frontend-theme-styled` base theme files](https://github.com/liferay/liferay-portal/tree/master/modules/apps/frontend-theme/frontend-theme-styled/src/main/resources/META-INF/resources/_styled).\n\n### eject\n\n**Note: this is a one-way operation. Once you eject, you can't go back.**\n\n```sh\nliferay-npm-scripts eject\n```\n\nEject will remove `liferay-npm-scripts` as a dependency and write all of the necessary configuration files and replace npm scripts. To see the before and after, check out the [example](./example/eject).\n\n## Config\n\nIf you need to add additional configuration you can do so by creating a `.liferaynpmscriptsrc` file at the root of your project. The default configuration of this file can be seen [here](./src/config/liferay-npm-scripts.json).\n\n### Other Config\n\nIf you need more flexibility over babel or the bundler. You can still add a `.babelrc` or `.npmbundlerrc` which will be merged with the default settings this tool provides. [Default Babel Config](./src/config/babel.json), [Default Bundler Config](./src/config/npm-bundler.json)\n\nFor more control over `lint` and `format`, follow the configuration options [here](https://github.com/liferay/liferay-frontend-source-formatter#custom-configuration)\n\nWant to use a different `NODE_ENV`? Try doing something like\n\n```sh\nNODE_ENV=development liferay-npm-scripts build\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/liferay-npm-scripts/-/liferay-npm-scripts-1.5.1.tgz#95628e0223cd2f29051b27f2ea32c2fc3bcfe9bc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/liferay-npm-scripts/-/liferay-npm-scripts-1.5.1.tgz",
    "hash": "95628e0223cd2f29051b27f2ea32c2fc3bcfe9bc",
    "integrity": "sha512-z/NjCwosut1ZXyn3YlWCPv5gQ6/Pxce8ZZ4pLnPoQa6rL6g+dVKwq+S4/O/oIEG5QSS8iGQDgJFnP0UTj8/ayA==",
    "registry": "npm",
    "packageName": "liferay-npm-scripts"
  },
  "registry": "npm",
  "hash": "95628e0223cd2f29051b27f2ea32c2fc3bcfe9bc"
}