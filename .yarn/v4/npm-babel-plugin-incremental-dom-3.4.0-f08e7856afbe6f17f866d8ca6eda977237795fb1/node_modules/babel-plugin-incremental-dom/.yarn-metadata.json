{
  "manifest": {
    "name": "babel-plugin-incremental-dom",
    "version": "3.4.0",
    "description": "Turn jsx into incremental-dom",
    "repository": {
      "type": "git",
      "url": "https://github.com/jridgewell/babel-plugin-incremental-dom.git"
    },
    "license": "MIT",
    "main": "lib/index.js",
    "dependencies": {
      "babel-plugin-syntax-jsx": "^6.8.0",
      "babel-types": "^6.0.0"
    },
    "devDependencies": {
      "babel": "^6.0.0",
      "babel-cli": "^6.0.0",
      "babel-core": "^6.0.0",
      "babel-eslint": "^4.0.0",
      "babel-preset-es2015": "^6.3.13",
      "babel-register": "^6.4.3",
      "eslint": "^1.0.0",
      "mocha": "^2.2.5"
    },
    "scripts": {
      "preversion": "npm test",
      "version": "npm run build",
      "build": "babel src --out-dir lib --copy-files",
      "test": "mocha --compilers js:babel-register && npm run lint",
      "lint": "eslint src"
    },
    "keywords": [
      "babel-plugin",
      "transform",
      "incremental-dom",
      "jsx"
    ],
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-babel-plugin-incremental-dom-3.4.0-f08e7856afbe6f17f866d8ca6eda977237795fb1\\node_modules\\babel-plugin-incremental-dom\\package.json",
    "readmeFilename": "README.md",
    "readme": "# babel-plugin-incremental-dom [![Build Status](https://travis-ci.org/jridgewell/babel-plugin-incremental-dom.svg?branch=master)](https://travis-ci.org/jridgewell/babel-plugin-incremental-dom)\n\nTurn JSX into [Incremental DOM](http://google.github.io/incremental-dom/).\n\n## Example\n\n**In**\n\n```javascript\nexport default function render(data) {\n    var header = data.conditional ? <div /> : null;\n    var collection = data.items.map((item) => {\n        return <li key={item.id} class={item.className}>{item.name}</li>;\n    });\n\n    return <div id=\"container\">\n        {header}\n        <ul>{collection}</ul>\n        <p {...data.props}>Some features</p>\n    </div>;\n}\n```\n\n**Out** (default, unoptimized options)\n\n```javascript\nexport default function render(data) {\n    var header = data.conditional ? _jsxWrapper(function () {\n        return elementVoid(\"div\");\n    }) : null;\n    var collection = data.items.map(function (item) {\n        return _jsxWrapper(function (_item$id, _item$className, _item$name) {\n            elementOpen(\"li\", _item$id, [\"key\", _item$id], \"class\", _item$className);\n\n            _renderArbitrary(_item$name);\n\n            return elementClose(\"li\");\n        }, [item.id, item.className, item.name]);\n    });\n\n    elementOpen(\"div\", null, [\"id\", \"container\"]);\n\n    _renderArbitrary(header);\n\n    elementOpen(\"ul\");\n\n    _renderArbitrary(collection);\n\n    elementClose(\"ul\");\n    elementOpenStart(\"p\");\n\n    _forOwn(data.props, _attr);\n\n    elementOpenEnd(\"p\");\n    text(\"Some features\");\n    elementClose(\"p\");\n    return elementClose(\"div\");\n}\n\nvar _jsxWrapper = function _jsxWrapper(func, args) {\n    var wrapper = args ? function wrapper() {\n        return func.apply(this, args);\n    } : func;\n    wrapper.__jsxDOMWrapper = true;\n    return wrapper;\n};\n\nvar _attr = function _attr(value, name) {\n    attr(name, value);\n};\n\nvar _hasOwn = Object.prototype.hasOwnProperty;\n\nvar _forOwn = function _forOwn(object, iterator) {\n    for (var prop in object) {\n        if (_hasOwn.call(object, prop)) iterator(object[prop], prop);\n    }\n};\n\nvar _renderArbitrary = function _renderArbitrary(child) {\n    var type = typeof child;\n\n    if (type === \"number\" || type === \"string\" || child && child instanceof String) {\n        text(child);\n    } else if (type === \"function\" && child.__jsxDOMWrapper) {\n        child();\n    } else if (Array.isArray(child)) {\n        child.forEach(_renderArbitrary);\n    } else {\n        _forOwn(child, _renderArbitrary);\n    }\n};\n```\n\n## Installation\n\n```sh\n$ npm install babel-plugin-incremental-dom\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\n```json\n{\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"incremental-dom\"]\n}\n```\n\nAn optional [function prefix](#function-prefix), [runtime](#runtime),\nand [hoist boolean](#hoist) may be passed.\n\n### Via CLI\n\n```sh\n$ babel --plugins incremental-dom script.js\n```\n\n### Via Node API\n\n```javascript\nrequire(\"babel-core\").transform(\"code\", {\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"incremental-dom\"],\n});\n```\n\nAn optional [function prefix](#function-prefix), [runtime](#runtime),\nand [hoist boolean](#hoist) may be passed.\n\n### Options\n\n#### Hoist\n\nYou may enable the experimental `hoist` option to hoist static attribute\narrays and element wrappers to the highest available scope. This avoids\nexpensive instance allocations when running the render function multiple\ntimes.\n\n```js\n// Disabled (default)\nfunction render() {\n    return elementVoid(\"div\", \"key\", [\"id\", \"container\"]);\n}\n```\n\n```js\n// Enabled\nvar _statics = [\"id\", \"container\"];\n\nfunction render() {\n    return elementVoid(\"div\", \"key\", _statics);\n}\n```\n\nTo do this, simply add the `hoist` option to the Incremental DOM plugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"hoist\": true\n    }\n  ]]\n}\n```\n\n#### Force Statics Key\n\nIncremental DOM [recommends](http://google.github.io/incremental-dom/#rendering-dom/statics-array)\nonly using static attribute arrays when a `key` is specified. For that\nreason this plugin will deoptimize static attributes into dynamic unless\nthere is a key.\n\nAnother option is to generate a cryptographically secure v4 UUID `key`,\nsince the chance of collisions is so infinitesimal.\n\n```js\n// Disabled (default)\nfunction render(condition) {\n  elementVoid(\"a\", \"key\", [\"href\", \"http://key/specified\"]);\n  if (condition)\n    elementVoid(\"a\", null, null, \"href\", \"http://example.com\");\n  } else {\n    elementVoid(\"a\", null, null, \"href\", \"http://other.com\");\n  }\n}\n```\n\n```js\n// Enabled\nfunction render() {\n  elementVoid(\"a\", \"key\", [\"href\", \"http://key/specified\"]);\n  if (condition)\n    elementVoid(\"a\", \"8ad02822-f391-48fb-a277-8065f7f92a99\", [\"href\", \"http://example.com\"]);\n  } else {\n    elementVoid(\"a\", \"adbe4414-e6ad-41c0-aae2-1ca578653119\", [\"href\", \"http://other.com\"]);\n  }\n}\n```\n\nTo do this, simply add the `forceStatics` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"forceStatics\": true\n    }\n  ]]\n}\n```\n\n#### Namspaced Attributes\n\nIncremental DOM supports a few Attribute Namespaces, but those are\nforeign to JSX. You can enabled them with the `namespaceAttributes`\noption. Note that this does not enable Namespaced Elements.\n\n```js\n// Enabled\nfunction render() {\n    return elementVoid(\"a\", null, [\"xml:static\", true], \"xlink:href\", \"https\");\n}\n```\n\nTo do this, simply add the `namespaceAttributes` option to the\nIncremental DOM plugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"namespaceAttributes\": true\n    }\n  ]]\n}\n```\n\n#### Inline JSX Expressions\n\nYou may enable the experimental `inlineExpressions` option to attempt to\ninline any variables declared outside the root JSX element. This can\nsave you from allocating needless closure wrappers around elements that\nare only referenced inside the root element.\n\n\n```js\n// Disabled (default)\nfunction render() {\n  var header = _jsxWrapper(function () {\n    return elementVoid(\"header\");\n  });\n  elementOpen(\"body\");\n\n  _renderArbitrary(header);\n\n  return elementClose(\"body\");\n}\n```\n\n```js\n// Enabled\nfunction render() {\n  elementOpen(\"body\");\n  elementVoid(\"header\");\n  return elementClose(\"body\");\n}\n```\n\nTo do this, simply add the `inlineExpressions` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"inlineExpressions\": true\n    }\n  ]]\n}\n```\n\n#### Fast Root\n\nYou may enable the experimental `fastRoot` option so that JSX tags\ninside the root element are never wrapped inside a closure. For code\nwith array maps, this should significantly decrease memory usage and\nincrease speed.\n\n\n```js\n// Disabled (default)\nfunction render() {\n  elementOpen(\"ul\");\n\n  _renderArbitrary(items.map(function (item) {\n    return _jsxWrapper(function (_item$name) {\n      elementOpen(\"li\");\n\n      _renderArbitrary(_item$name);\n\n      return elementClose(\"li\");\n    }, [item.name]);\n  }));\n\n  return elementClose(\"ul\");\n}\n```\n\n```js\n// Enabled\nfunction render() {\n  elementOpen(\"ul\");\n\n  items.map(function (item) {\n    elementOpen(\"li\");\n\n    _renderArbitrary(item.name);\n\n    return elementClose(\"li\");\n  });\n\n  return elementClose(\"ul\");\n}\n```\n\nTo do this, simply add the `fastRoot` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"fastRoot\": true\n    }\n  ]]\n}\n```\n\n\nAlternatively, you may enable and disable this with inline comments:\n\n```jsx\nfunction render() {\n    /**\n     * Enable for this tree\n     * @incremental-dom enable-fastRoot\n     */\n    return <div>{\n      items.map(function(item) {\n        return <li>{item.name}</li>;\n      })\n    }</div>;\n}\n\n/**\n * Enable for everything under this function\n * @incremental-dom enable-fastRoot\n */\nfunction render() {\n    /**\n     * Disable fastroot for this tree\n     * @incremental-dom disable-fastRoot\n     */\n    return <div>{\n      items.map(function(item) {\n        return <li>{item.name}</li>;\n      })\n    }</div>;\n}\n```\n\n#### Components\n\nYou may enable the experimental `components` option so that JSX tags\nthat start with an upper case letter are passed as a reference to\nincremental DOM calls, instead of as a string. This can be useful when\nyour code implements components through these kind of calls, though\nthat's not done by incremental DOM automatically. Note that this will\nbreak unless you have code to handle it.\n\n\n```js\n// Disabled (default)\nfunction render() {\n  elementVoid(\"MyComponent\");\n}\n```\n\n```js\n// Enabled\nfunction render() {\n  elementVoid(MyComponent);\n}\n```\n\nTo do this, simply add the `components` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"components\": true\n    }\n  ]]\n}\n```\n\n#### Function Prefix\n\nBy deafult, `babel-plugin-incremental-dom` directly calls Incremental\nDOM functions:\n\n```js\n// Disabled (default)\nfunction render() {\n  elementOpen(\"div\");\n  elementClose(\"div\");\n}\n```\n\nIf you are instead including Incremental DOM via a browser script, it\nmay be easier to reference the functions from the `IncrementalDOM`\nobject:\n\n```js\n// Enabled with `IncrementalDOM`\nfunction render() {\n  IncrementalDOM.elementOpen(\"div\");\n  IncrementalDOM.elementClose(\"div\");\n}\n```\n\nTo do this, simply add the `prefix` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"prefix\": \"IncrementalDOM\"\n    }\n  ]]\n}\n```\n\n#### Runtime\n\nBy deafult, `babel-plugin-incremental-dom` injects several helpers into\neach file as needed. When transforming multiple files with JSX, you can\navoid this helper duplication by specifying a runtime library to use\ninstead.\n\nThe runtime's required functions are:\n\n- `attr`\n\n  Not to be confused with IncrementalDOM's own `#attr` function, the\n  runtime's `attr` must take in a `value` and `attrName` and call\n  IncrementalDOM's `#attr`. Basically, it flip flops its parameters so\n  that `IncrementalDOM#attr` can be used in a `Array#forEach` like\n  method signature.\n\n  ```js\n  runtime.attr = function(value, attrName) {\n    IncrementalDOM.attr(attrName, value);\n  };\n  ```\n\n- `forOwn`\n\n  No surprises here, this iterates over every enumerable-own property of\n  `object`, calling `iterator` with the property's value and name.\n\n  ```js\n  runtime.forOwn = function(object, iterator) {\n    var hasOwn = Object.prototype.hasOwnProperty;\n    for (var prop in object) {\n      if (hasOwn.call(object, prop)) {\n        iterator(object[prop], prop);\n      }\n    }\n  };\n  ```\n\n- `jsxWrapper`\n\n  To prevent iDOM's incremental nature from screwing up our beautiful\n  JSX syntax, certain elements must be wrapped in a function closure\n  that will be later evaluated. That closure will be passed into\n  `jsxWrapper`, along with an array of any (if any) arguments\n  needed to render the contained JSX element.\n\n  Note it is not `jsxWrapper`'s responsibility to create the JSX\n  closure, merely to help identify the passed in closure later. Here, we\n  set the `__jsxDOMWrapper` property of the returned closure.\n\n  ```js\n  runtime.jsxWrapper = function(elementClosure, args) {\n    var wrapper = args ? function() {\n      return elementClosure.apply(this, args);\n    } : jsxClosure;\n    wrapper.__jsxDOMWrapper = true;\n    return wrapper;\n  }\n  ```\n\n- `renderArbitrary`\n\n  To render child elements correctly, we'll need to be able to identify\n  them. `renderArbitrary` receives a `child`, and must call the\n  appropriate action. For string and numbers, that's to call\n  `IncrementalDOM#text`. For wrapped JSX Closures, that's to invoke the\n  closure. For arrays, that's to render every element. And for objects,\n  that's to render every property.\n\n  Note that we identify JSX Closures by the `__jsxDOMWrapper` property\n  we set inside the `jsxWrapper` runtime function.\n\n  ```js\n  runtime.renderArbitrary = function _renderArbitrary(child) {\n    var type = typeof child;\n    if (type === \"number\" || (type === string || type === 'object' && child instanceof String)) {\n      text(child);\n    } else if (type === \"function\" && child.__jsxDOMWrapper) {\n      child();\n    } else if (Array.isArray(child)) {\n      child.forEach(_renderArbitrary);\n    } else if (type === 'object' && String(child) === '[object Object]') {\n      runtime.forOwn(child, _renderArbitrary);\n    }\n  }\n  ```\n\nTo do this, simply add the `runtime` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"runtime\": \"iDOMHelpers\"\n    }\n  ]]\n}\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 James Kyle <me@thejameskyle.com> and Justin Ridgewell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/babel-plugin-incremental-dom/-/babel-plugin-incremental-dom-3.4.0.tgz#f08e7856afbe6f17f866d8ca6eda977237795fb1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/babel-plugin-incremental-dom/-/babel-plugin-incremental-dom-3.4.0.tgz",
    "hash": "f08e7856afbe6f17f866d8ca6eda977237795fb1",
    "integrity": "sha1-8I54Vq++bxf4ZtjKbtqXcjd5X7E=",
    "registry": "npm",
    "packageName": "babel-plugin-incremental-dom"
  },
  "registry": "npm",
  "hash": "f08e7856afbe6f17f866d8ca6eda977237795fb1"
}