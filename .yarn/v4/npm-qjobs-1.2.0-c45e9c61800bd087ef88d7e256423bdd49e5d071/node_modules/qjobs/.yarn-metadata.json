{
  "manifest": {
    "name": "qjobs",
    "version": "1.2.0",
    "description": "qjobs is a simple and stupid queue job manager for nodejs",
    "main": "qjobs.js",
    "scripts": {
      "test": "make test"
    },
    "engines": {
      "node": ">=0.9"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/franck34/qjobs.git"
    },
    "keywords": [
      "queue",
      "jobs",
      "job",
      "concurrency",
      "control"
    ],
    "author": {
      "name": "Franck TABARY"
    },
    "license": "MIT",
    "readmeFilename": "Readme.md",
    "gitHead": "6b6ea2dd626799e946ab700e4c4902ab792d3bb2",
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-qjobs-1.2.0-c45e9c61800bd087ef88d7e256423bdd49e5d071\\node_modules\\qjobs\\package.json",
    "readme": "[![Build Status](https://secure.travis-ci.org/franck34/qjobs.png)](http://travis-ci.org/franck34/qjobs)\n\n**qjobs**\n==================\n***Efficient queue job manager module for nodejs.***\n\nFeatures\n--------------\n* Concurrency limiter\n* Dynamic queue, a job can be added while the queue is running\n* Optional delay before continuing after max concurrency has been reached\n* Support of pause/unpause\n* Events emitter based: start, end, sleep, continu, jobStart, jobEnd\n* Quick statistic function, so you can know where the queue is, at regular interval\n\nFor what it can be usefull ?\n---------------------\nJobs which needs to run in parallels, but in a controled maner, example: \n* Network scanners\n* Parallels monitoring jobs\n* Images/Videos related jobs \n\n\nCompatibility :\n------------------\n* not tested with nodejs < 0.10\n\n\nExamples\n--------------------\n\n(take a look at tests directory if you are looking for running samples)\n\n\n```\nvar qjobs = new require('./qjobs');\n                                \n// My non blocking main job     \nvar myjob = function(args,next) {\n    setTimeout(function() {\n        console.log('Do something interesting here',args);\n        next();\n    },1000);\n}\n\nvar q = new qjobs({maxConcurrency:10});\n\n// Let's add 30 job to the queue\nfor (var i = 0; i<30; i++) {\n    q.add(myjob,[i,'test '+i]);\n}\n\nq.on('start',function() {\n    console.log('Starting ...');\n});\n\nq.on('end',function() {\n    console.log('... All jobs done');\n});\n\nq.on('jobStart',function(args) {\n    console.log('jobStart',args);\n});\n\nq.on('jobEnd',function(args) {\n\n    console.log('jobend',args);\n\n    // If i'm jobId 10, then make a pause of 5 sec\n\n    if (args._jobId == 10) {\n        q.pause(true);\n        setTimeout(function() {\n            q.pause(false);\n        },5000);\n    }\n});\n\nq.on('pause',function(since) {\n    console.log('in pause since '+since+' milliseconds');\n});\n\nq.on('unpause',function() {\n    console.log('pause end, continu ..');\n});\n\nq.run();\n\n//q.abort() will empty jobs list\n\n```\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/qjobs/-/qjobs-1.2.0.tgz#c45e9c61800bd087ef88d7e256423bdd49e5d071",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/qjobs/-/qjobs-1.2.0.tgz",
    "hash": "c45e9c61800bd087ef88d7e256423bdd49e5d071",
    "integrity": "sha512-8YOJEHtxpySA3fFDyCRxA+UUV+fA+rTWnuWvylOK/NCjhY+b4ocCtmu8TtsWb+mYeU+GCHf/S66KZF/AsteKHg==",
    "registry": "npm",
    "packageName": "qjobs"
  },
  "registry": "npm",
  "hash": "c45e9c61800bd087ef88d7e256423bdd49e5d071"
}