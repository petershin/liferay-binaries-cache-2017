{
  "manifest": {
    "name": "promise-polyfill",
    "version": "7.1.2",
    "description": "Lightweight promise polyfill. A+ compliant",
    "main": "lib/index.js",
    "jsnext:main": "src/index.js",
    "unpkg": "dist/promise.min.js",
    "files": [
      "src",
      "lib",
      "dist"
    ],
    "scripts": {
      "precommit": "lint-staged",
      "pretest": "npm run build:cjs",
      "test": "eslint src && mocha && karma start --single-run",
      "prebuild": "rimraf lib dist",
      "build": "run-p build:**",
      "build:cjs": "rollup -i src/index.js -o lib/index.js -f cjs",
      "build:umd": "cross-env NODE_ENV=development rollup -i src/index.js -o dist/promise.js -c rollup.umd.config.js",
      "build:umd:min": "cross-env NODE_ENV=production rollup -i src/index.js -o dist/promise.min.js -c rollup.umd.config.js",
      "build:cjs-polyfill": "rollup -i src/polyfill.js -o lib/polyfill.js -f cjs",
      "build:umd-polyfill": "cross-env NODE_ENV=development rollup -i src/polyfill.js -o dist/polyfill.js -c rollup.umd.config.js",
      "build:umd-polyfill:min": "cross-env NODE_ENV=production rollup -i src/polyfill.js -o dist/polyfill.min.js -c rollup.umd.config.js",
      "prepublish": "test $(npm -v | tr . '\\n' | head -n 1) -ge '4' || exit 1",
      "prepare": "npm run build"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/taylorhakes/promise-polyfill.git"
    },
    "author": {
      "name": "Taylor Hakes"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/taylorhakes/promise-polyfill/issues"
    },
    "homepage": "https://github.com/taylorhakes/promise-polyfill",
    "devDependencies": {
      "cross-env": "^5.1.1",
      "eslint": "^4.11.0",
      "husky": "^0.14.3",
      "karma": "^0.13.19",
      "karma-browserify": "^4.4.2",
      "karma-chrome-launcher": "^0.2.2",
      "karma-mocha": "^0.2.1",
      "lint-staged": "^5.0.0",
      "mocha": "^2.3.4",
      "npm-run-all": "^4.1.2",
      "prettier": "^1.8.2",
      "promises-aplus-tests": "*",
      "rimraf": "^2.6.2",
      "rollup": "^0.52.0",
      "rollup-plugin-uglify": "^2.0.1",
      "sinon": "^1.17.2"
    },
    "keywords": [
      "promise",
      "promise-polyfill",
      "ES6",
      "promises-aplus"
    ],
    "dependencies": {},
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-promise-polyfill-7.1.2-ab05301d8c28536301622d69227632269a70ca3b\\node_modules\\promise-polyfill\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Promise Polyfill\n\n[![travis][travis-image]][travis-url]\n\n[travis-image]: https://img.shields.io/travis/taylorhakes/promise-polyfill.svg?style=flat\n[travis-url]: https://travis-ci.org/taylorhakes/promise-polyfill\n\nLightweight ES6 Promise polyfill for the browser and node. Adheres closely to\nthe spec. It is a perfect polyfill IE, Firefox or any other browser that does\nnot support native promises.\n\nFor API information about Promises, please check out this article\n[HTML5Rocks article](http://www.html5rocks.com/en/tutorials/es6/promises/).\n\nIt is extremely lightweight. **_< 1kb Gzipped_**\n\n## Browser Support\n\nIE8+, Chrome, Firefox, IOS 4+, Safari 5+, Opera\n\n### NPM Use\n\n```\nnpm install promise-polyfill --save-exact\n```\n\n### Bower Use\n\n```\nbower install promise-polyfill\n```\n\n### CDN Polyfill Use\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/promise-polyfill@7/dist/polyfill.min.js\"></script>\n```\n\n## Downloads\n\n* [Promise](https://raw.github.com/taylorhakes/promise-polyfill/master/dist/promise.js)\n* [Promise-min](https://raw.github.com/taylorhakes/promise-polyfill/master/dist/promise.min.js)\n\n## Simple use\n\n```js\nimport Promise from 'promise-polyfill';\n```\n\nthen you can use like normal Promises\n\n```js\nvar prom = new Promise(function(resolve, reject) {\n  // do a thing, possibly async, thenâ€¦\n\n  if (/* everything turned out fine */) {\n    resolve(\"Stuff worked!\");\n  }  else {\n    reject(new Error(\"It broke\"));\n  }\n});\n\nprom.then(function(result) {\n  // Do something when async done\n});\n```\n\nIf you would like to just polyfill, only if native doesn't exist.\n\n```js\nimport 'promise-polyfill/src/polyfill';\n```\n\n## Performance\n\nBy default promise-polyfill uses `setImmediate`, but falls back to `setTimeout`\nfor executing asynchronously. If a browser does not support `setImmediate`\n(IE/Edge are the only browsers with setImmediate), you may see performance\nissues. Use a `setImmediate` polyfill to fix this issue.\n[setAsap](https://github.com/taylorhakes/setAsap) or\n[setImmediate](https://github.com/YuzuJS/setImmediate) work well.\n\nIf you polyfill `window.setImmediate` or use `Promise._immediateFn = yourImmediateFn` it will be used instead of `window.setTimeout`\n\n```\nnpm install setasap --save\n```\n\n```js\nimport Promise from 'promise-polyfill/src/polyfill';\nimport setAsap from 'setasap';\nPromise._immediateFn = setAsap;\n```\n\n## Unhandled Rejections\n\npromise-polyfill will warn you about possibly unhandled rejections. It will show\na console warning if a Promise is rejected, but no `.catch` is used. You can\nchange this behavior by doing.\n\n```js\nPromise._unhandledRejectionFn = <your reject error handler>;\n```\n\nIf you would like to disable unhandled rejection messages. Use a noop like\nbelow.\n\n```js\nPromise._unhandledRejectionFn = function(rejectError) {};\n```\n\n## Testing\n\n```\nnpm install\nnpm test\n```\n\n## License\n\nMIT\n",
    "licenseText": "Copyright (c) 2014 Taylor Hakes\nCopyright (c) 2014 Forbes Lindesay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promise-polyfill/-/promise-polyfill-7.1.2.tgz#ab05301d8c28536301622d69227632269a70ca3b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promise-polyfill/-/promise-polyfill-7.1.2.tgz",
    "hash": "ab05301d8c28536301622d69227632269a70ca3b",
    "integrity": "sha512-FuEc12/eKqqoRYIGBrUptCBRhobL19PS2U31vMNTfyck1FxPyMfgsXyW4Mav85y/ZN1hop3hOwRlUDok23oYfQ==",
    "registry": "npm",
    "packageName": "promise-polyfill"
  },
  "registry": "npm",
  "hash": "ab05301d8c28536301622d69227632269a70ca3b"
}