{
  "manifest": {
    "author": {
      "name": "Rob Frampton",
      "email": "rob.g.frampton@gmail.com"
    },
    "dependencies": {
      "async": "^2.6.1",
      "autoprefixer": "^9.1.5",
      "compass-mixins": "^0.12.8",
      "cross-spawn": "^2.2.3",
      "del": "^4.0.0",
      "diff": "^1.4.0",
      "event-stream": "^4.0.0",
      "fs-extra": "^0.24.0",
      "globby": "^4.0.0",
      "gulp-concat": "^2.5.2",
      "gulp-debug": "^2.0.0",
      "gulp-filter": "^2.0.2",
      "gulp-help": "^1.6.1",
      "gulp-if": "^2.0.2",
      "gulp-inject": "^5.0.2",
      "gulp-insert": "^0.5.0",
      "gulp-liferay-r2-css": "^0.0.2",
      "gulp-livereload": "^4.0.1",
      "gulp-load-plugins": "^1.5.0",
      "gulp-postcss": "^8.0.0",
      "gulp-rename": "^1.2.0",
      "gulp-replace-task": "^0.11.0",
      "gulp-sass": "^3.2.0",
      "gulp-sourcemaps": "1.6.0",
      "gulp-storage": "^1.0.6",
      "gulp-zip": "^3.2.0",
      "http-proxy": "^1.17.0",
      "inquirer": "^0.12.0",
      "liferay-frontend-common-css": "^1.0.4",
      "list-stream": "^1.0.0",
      "lodash": "^4.17.11",
      "minimist": "^1.1.0",
      "node-bourbon": "4.2.3",
      "npm-keyword": "^5.0.0",
      "opn": "^5.4.0",
      "package-json": "^5.0.0",
      "plugin-error": "^1.0.1",
      "portfinder": "^1.0.20",
      "run-sequence": "^2.2.1",
      "tar-fs": "^1.16.3",
      "through2": "^2.0.0",
      "tiny-lr": "^1.1.1",
      "vinyl-paths": "^1.0.0",
      "xml2js": "^0.4.15"
    },
    "description": "A set of tasks for building and deploying Liferay Portal themes.",
    "devDependencies": {
      "bluebird": "^3.3.4",
      "gulp": "^3.9.1",
      "liferay-frontend-theme-styled": "^3.0.13",
      "liferay-frontend-theme-unstyled": "^3.0.13"
    },
    "engines": {
      "node": ">=8.0.0"
    },
    "keywords": [
      "liferay",
      "theme"
    ],
    "license": "MIT",
    "main": "index.js",
    "name": "liferay-theme-tasks",
    "repository": {
      "type": "git",
      "url": "https://github.com/liferay/liferay-js-themes-toolkit",
      "directory": "packages/liferay-theme-tasks"
    },
    "version": "9.1.1",
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-liferay-theme-tasks-9.1.1-7fd834356b8cff9e2a3e2eb9358e2580f7c889bf\\node_modules\\liferay-theme-tasks\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Liferay Theme Tasks [![Build Status](https://travis-ci.org/liferay/liferay-theme-tasks.svg?branch=master)](https://travis-ci.org/liferay/liferay-theme-tasks)\n\n> The liferay-theme-tasks module is intended for use with the yeoman generator for [Liferay themes](https://github.com/liferay/generator-liferay-theme).\n\n## Available tasks\n\n-   [build](#build)\n-   [deploy](#deploy)\n-   [extend](#extend)\n-   [kickstart](#kickstart)\n-   [status](#status)\n-   [watch](#watch)\n-   [init](#init)\n\n### Build\n\n```\ngulp build\n```\n\nThe `build` task generates the base theme files, compiles sass into css, and zips all theme files into a .war file, ready to be deployed to a Liferay server.\n\n### Deploy\n\n```\ngulp deploy\n```\n\nThe deploy initially runs the `build` task, and once the .war file has been created it deploys to the specified local appserver.\n\nIf you want to deploy to a live site, use the `--live` flag to deploy to a remote server.\n\n```\ngulp deploy --live\n```\n\nNote that the specified server must have the [server-manager-web](https://github.com/liferay/liferay-plugins/tree/master/webs/server-manager-web) plugin deployed. The `--live` flag will deploy to the remote server specified in the [init](#init) task.\n\nIf you want to deploy to a different server without changing the default server specified in [init](#init), you may use the `--url` flag.\n\n```\ngulp deploy --live --url http://some-host.com\n```\n\nYou may also specify your login credentials using the `-u`/`--username` and `-p`/`--password` flags.\n\n```\ngulp deploy --live -u test@liferay.com -p test\n```\n\n**Note:** the `deploy --live` task is not currently working for Liferay 7.0 as the `server-manager-web` plugin has not been migrated to work with OSGi.\n\n### Extend\n\n```\ngulp extend\n```\n\nThe `extend` task is what allows you to specify what base theme you are extending from. By default, themes created with the [theme generator](https://github.com/natecavanaugh/generator-liferay-theme) will base off the [styled theme](https://www.npmjs.com/package/liferay-frontend-theme-styled).\n\nYou first are prompted if you want to extend a Base theme or Themelet, then you will be prompted for where you would like to search for modules. `Globally installed npm modules` will search npm modules that have been installed on your computer with the `-g` flag. Selecting `npm registry` will search for published modules on npm.\n\nOnce it gives you the options and you make your selection, it will add any selected modules to your package.json under dependencies and run `npm install`.\n\n### Kickstart\n\n```\ngulp kickstart\n```\n\nThe `kickstart` task allows you to copy the css, images, js, and templates from another theme into the src directory of your own. This allows you to quickly get up and running with a production ready theme.\n\n`kickstart` is similar to `extend`. The difference is that kickstarting from another theme is a one time inheritance, while extending from another theme is a dynamic inheritance that applies your src files on top of the base theme on every build.\n\n### Status\n\n```\ngulp status\n```\n\nDisplays what base theme/themelets your theme is extending.\n\n### Watch\n\n```\ngulp watch\n```\n\nThe watch task allows you to see the changes you make to your theme without a full redeploy.\n\nAfter invoking the watch task, every time you save any changes to a file in your theme it compiles (if applicable) and copies it directly to your appserver.\n\n### Init\n\n```\ngulp init\n```\n\nPrompts user for local and remote appserver information used for deployment purposes (see [deploy](#deploy) task).\n\n## API\n\n### registerTasks\n\nTo register the liferay-theme-tasks you must call the `registerTasks` method in your theme's gulpfile.js, `gulp` being the only required parameter.\n\n```js\nvar gulp = require('gulp');\nvar liferayThemeTasks = require('liferay-theme-tasks');\n\nliferayThemeTasks.registerTasks({\n\tgulp: gulp,\n});\n```\n\n#### Options\n\n##### distName\n\ntype: `string`<br>\nrequired: `false`\n\nThe name that will be given to the generated war file. The `distName` can also be a template which has access to the theme's `package.json` fields.\n\n```js\nliferayThemeTasks.registerTasks({\n\tdistName: '${name}-${version}',\n\tgulp: gulp,\n});\n\n// my-theme-1.0.0\n```\n\n**Note:** in 7.0 changing the war file name will also affect the context path of the theme when using `gulp deploy` which can result in having multiple versions of your theme deployed at the same time.\n\n##### gulp\n\ntype: `gulp instance`<br>\nrequired: `true`\n\nA gulp instance for exposing liferay-theme-tasks.\n\n##### hookFn\n\ntype: `function`\n\nAllows theme developers to hook and overwrite tasks/sub tasks.\n\n```js\nvar gulp = require('gulp');\nvar liferayThemeTasks = require('liferay-theme-tasks');\n\nliferayThemeTasks.registerTasks({\n\tgulp: gulp,\n\thookFn: function(gulp) {\n\t\tgulp.hook('before:build:src', function(done) {\n\t\t\t// Fires before build:src task\n\t\t});\n\n\t\tgulp.hook('after:build', function(done) {\n\t\t\t// Fires after build task\n\t\t});\n\n\t\tgulp.task('build:base', function(done) {\n\t\t\t// Overwrites build:base task\n\t\t});\n\t},\n});\n```\n\nNote: `hook` callback function must invoke `done` argument OR return a stream.\n\n##### pathBuild\n\ntype: `string`<br>\ndefault: `./build`\n\nDetermines the destination of built files.\n\n##### pathDist\n\ntype: `string`<br>\ndefault: `./dist`\n\nDetermines the destination of the generated .war file.\n\n##### pathSrc\n\ntype: `string`<br>\ndefault: `./src`\n\nDetermines where theme source files are located. If set to anything other than default value, you must manually relocate all files in src directory to new location.\n\n##### postcss\n\ntype: `array`<br>\n\nSpecifies a list of [PostCSS](https://postcss.org/) plugins to run on the compiled CSS after the SASS compilation\n\n##### sassOptions\n\ntype: `object`\n\nWhatever properties are set in sassOptions get passed to [gulp-sass](https://www.npmjs.com/package/gulp-sass#options).\n\n## liferayTheme\n\nThe `liferayTheme` object is located in a theme's package.json file and contains various options that relate to the gulp tasks.\n\n```JSON\n{\n\t\"name\": \"my-liferay-theme\",\n\t\"version\": \"1.0.0\",\n\t\"main\": \"package.json\",\n\t\"keywords\": [\n\t\t\"liferay-theme\"\n\t],\n\t\"liferayTheme\": {\n\t\t\"baseTheme\": \"styled\",\n\t\t\"templateLanguage\": \"ftl\",\n\t\t\"version\": \"7.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"gulp\": \"^3.8.10\",\n\t\t\"liferay-theme-deps-7.1\": \"*\",\n\t\t\"liferay-theme-tasks\": \"*\"\n\t}\n}\n```\n\n### baseTheme\n\nDetermines the base theme. This property is set by the `extend` task.\n\n### hookModules\n\nThe name or names of npm modules. These modules must expose a function that follows the same pattern as a [hookFn](#hookFn).\n\nIf a module is listed in `hookModules`, it must also be added to the `devDependencies` of the theme.\n\n### themelets\n\nDetermines the themelets that are implemented by this theme. This property is set by the `extend` task.\n\n### version\n\nVersion of Liferay Portal this theme is intended for.\n\n## Additional Theme Dependencies\n\nIn order for themes to successfully build, they must declare additional dependencies in their package.json file such as [liferay-frontend-theme-unstyled](https://www.npmjs.com/package/liferay-frontend-theme-unstyled) and [liferay-frontend-theme-styled](https://www.npmjs.com/package/liferay-frontend-theme-styled).\n\nThese additional dependencies are normally included automatically in themes created with the [Theme Generator](https://github.com/liferay/generator-liferay-theme).\n\nIf you would like to require specific versions of these dependencies, you can specify them directly in your theme's package.json file.\n\nMIT\n",
    "licenseText": "# MIT License\n\nCopyright (c) 2017 Liferay, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/liferay-theme-tasks/-/liferay-theme-tasks-9.1.1.tgz#7fd834356b8cff9e2a3e2eb9358e2580f7c889bf",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/liferay-theme-tasks/-/liferay-theme-tasks-9.1.1.tgz",
    "hash": "7fd834356b8cff9e2a3e2eb9358e2580f7c889bf",
    "integrity": "sha512-36ZgJX1bXj5tojSp7QEeSLR9b/pEdPPxuECax037tbiZRo4sakRSxHFSPVf7vI7NOdysDRiwTNTwlza2XbB7Mg==",
    "registry": "npm",
    "packageName": "liferay-theme-tasks"
  },
  "registry": "npm",
  "hash": "7fd834356b8cff9e2a3e2eb9358e2580f7c889bf"
}