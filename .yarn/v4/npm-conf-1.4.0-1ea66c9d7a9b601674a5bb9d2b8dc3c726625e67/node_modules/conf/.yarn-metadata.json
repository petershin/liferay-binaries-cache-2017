{
  "manifest": {
    "name": "conf",
    "version": "1.4.0",
    "description": "Simple config handling for your app or module",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/conf.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "test": "xo && ava"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "config",
      "store",
      "app",
      "storage",
      "conf",
      "configuration",
      "settings",
      "preferences",
      "json",
      "data",
      "persist",
      "persistent",
      "save",
      "load",
      "read",
      "write",
      "cache"
    ],
    "dependencies": {
      "dot-prop": "^4.1.0",
      "env-paths": "^1.0.0",
      "make-dir": "^1.0.0",
      "pkg-up": "^2.0.0",
      "write-file-atomic": "^2.3.0"
    },
    "devDependencies": {
      "ava": "*",
      "clear-module": "^2.1.0",
      "del": "^3.0.0",
      "tempy": "^0.2.1",
      "xo": "*"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-conf-1.4.0-1ea66c9d7a9b601674a5bb9d2b8dc3c726625e67\\node_modules\\conf\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# conf [![Build Status: Linux and macOS](https://travis-ci.org/sindresorhus/conf.svg?branch=master)](https://travis-ci.org/sindresorhus/conf) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/n88jwh3aju39i0p2/branch/master?svg=true)](https://ci.appveyor.com/project/sindresorhus/conf/branch/master)\n\n> Simple config handling for your app or module\n\nAll you have to care about is what to persist. This module will handle all the dull details like where and how.\n\n*If you need this for Electron, check out [`electron-store`](https://github.com/sindresorhus/electron-store) instead.*\n\n\n## Install\n\n```\n$ npm install conf\n```\n\n\n## Usage\n\n```js\nconst Conf = require('conf');\nconst config = new Conf();\n\nconfig.set('unicorn', 'ðŸ¦„');\nconsole.log(config.get('unicorn'));\n//=> 'ðŸ¦„'\n\n// Use dot-notation to access nested properties\nconfig.set('foo.bar', true);\nconsole.log(config.get('foo'));\n//=> {bar: true}\n\nconfig.delete('unicorn');\nconsole.log(config.get('unicorn'));\n//=> undefined\n```\n\nOr [create a subclass](https://github.com/sindresorhus/electron-store/blob/master/index.js).\n\n\n## API\n\nChanges are written to disk atomically, so if the process crashes during a write, it will not corrupt the existing config.\n\n### Conf([options])\n\nReturns a new instance.\n\n### options\n\n#### defaults\n\nType: `Object`\n\nDefault config.\n\n#### configName\n\nType: `string`<br>\nDefault: `config`\n\nName of the config file (without extension).\n\nUseful if you need multiple config files for your app or module. For example, different config files between two major versions.\n\n#### projectName\n\nType: `string`<br>\nDefault: The `name` field in the package.json closest to where `conf` is imported.\n\nYou only need to specify this if you don't have a package.json file in your project.\n\n#### cwd\n\nType: `string`<br>\nDefault: System default [user config directory](https://github.com/sindresorhus/env-paths#pathsconfig)\n\n**You most likely don't need this. Please don't use it unless you really have to.**\n\nOverrides `projectName`.\n\nThe only use-case I can think of is having the config located in the app directory or on some external storage.\n\n#### encryptionKey\n\nType: `string` `Buffer` `TypedArray` `DataView`<br>\nDefault: `undefined`\n\nNote that this is **not intended for security purposes**, since the encryption key would be easily found inside a plain-text Node.js app.\n\nIts main use is for obscurity. If a user looks through the config directory and finds the config file, since it's just a JSON file, they may be tempted to modify it. By providing an encryption key, the file will be obfuscated, which should hopefully deter any users from doing so.\n\nIt also has the added bonus of ensuring the config file's integrity. If the file is changed in any way, the decryption will not work, in which case the store will just reset back to its default state.\n\nWhen specified, the store will be encrypted using the [`aes-256-cbc`](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation) encryption algorithm.\n\n### Instance\n\nYou can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a `key` to access nested properties.\n\nThe instance is [`iterable`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols) so you can use it directly in a [`forâ€¦of`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of) loop.\n\n#### .set(key, value)\n\nSet an item.\n\nThe `value` must be JSON serializable.\n\n#### .set(object)\n\nSet multiple items at once.\n\n#### .get(key, [defaultValue])\n\nGet an item or `defaultValue` if the item does not exist.\n\n#### .has(key)\n\nCheck if an item exists.\n\n#### .delete(key)\n\nDelete an item.\n\n#### .clear()\n\nDelete all items.\n\n#### .onDidChange(key, callback)\n\n`callback`: `(newValue, oldValue) => {}`\n\nWatches the given `key`, calling `callback` on any changes. When a key is first set `oldValue` will be `undefined`, and when a key is deleted `newValue` will be `undefined`.\n\n#### .size\n\nGet the item count.\n\n#### .store\n\nGet all the config as an object or replace the current config with an object:\n\n```js\nconf.store = {\n\thello: 'world'\n};\n```\n\n#### .path\n\nGet the path to the config file.\n\n\n\n## FAQ\n\n### How is this different from [`configstore`](https://github.com/yeoman/configstore)?\n\nI'm also the author of `configstore`. While it's pretty good, I did make some mistakes early on that are hard to change at this point. This module is the result of everything I learned from making `configstore`. Mainly where config is stored. In `configstore`, the config is stored in `~/.config` (which is mainly a Linux convention) on all systems, while `conf` stores config in the system default [user config directory](https://github.com/sindresorhus/env-paths#pathsconfig). The `~/.config` directory, it turns out, often have an incorrect permission on macOS and Windows, which has caused a lot of grief for users.\n\n\n## Related\n\n- [electron-store](https://github.com/sindresorhus/electron-store) - Simple data persistence for your Electron app or module\n- [cache-conf](https://github.com/SamVerschueren/cache-conf) - Simple cache config handling for your app or module\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/conf/-/conf-1.4.0.tgz#1ea66c9d7a9b601674a5bb9d2b8dc3c726625e67",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/conf/-/conf-1.4.0.tgz",
    "hash": "1ea66c9d7a9b601674a5bb9d2b8dc3c726625e67",
    "integrity": "sha512-bzlVWS2THbMetHqXKB8ypsXN4DQ/1qopGwNJi1eYbpwesJcd86FBjFciCQX/YwAhp9bM7NVnPFqZ5LpV7gP0Dg==",
    "registry": "npm",
    "packageName": "conf"
  },
  "registry": "npm",
  "hash": "1ea66c9d7a9b601674a5bb9d2b8dc3c726625e67"
}