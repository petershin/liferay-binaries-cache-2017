{
  "manifest": {
    "name": "rfdc",
    "version": "1.1.2",
    "description": "Really Fast Deep Clone",
    "main": "index.js",
    "scripts": {
      "test": "tap -R min test",
      "bench": "node benchmark",
      "lint": "standard",
      "cov": "tap --cov test",
      "cov-ui": "tap --coverage-report=html test"
    },
    "keywords": [
      "object",
      "obj",
      "properties",
      "clone",
      "copy",
      "deep",
      "recursive",
      "key",
      "keys",
      "values",
      "prop",
      "deep-clone",
      "deepclone",
      "deep-copy",
      "deepcopy",
      "fast",
      "performance",
      "performant",
      "fastclone",
      "fastcopy",
      "fast-clone",
      "fast-deep-clone",
      "fast-copy",
      "fast-deep-copy"
    ],
    "author": {
      "name": "David Mark Clements",
      "email": "david.clements@nearform.com"
    },
    "license": "MIT",
    "devDependencies": {
      "deep-copy": "^1.4.2",
      "fast-copy": "^1.2.1",
      "fastbench": "^1.0.1",
      "lodash.clonedeep": "^4.5.0",
      "standard": "^11.0.1",
      "tap": "^12.0.1"
    },
    "dependencies": {},
    "repository": {
      "type": "git",
      "url": "git+https://github.com/davidmarkclements/rfdc.git"
    },
    "bugs": {
      "url": "https://github.com/davidmarkclements/rfdc/issues"
    },
    "homepage": "https://github.com/davidmarkclements/rfdc#readme",
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-rfdc-1.1.2-e6e72d74f5dc39de8f538f65e00c36c18018e349\\node_modules\\rfdc\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# rfdc\n\nReally Fast Deep Clone\n\n## Usage\n\n```js\nconst clone = require('rfdc')()\nclone({a: 1, b: {c: 2}}) // => {a: 1, b: {c: 2}}\n```\n\n## API\n\n### `require('rfdc')(opts = { proto: false, circles: false }) => clone(obj) => obj2`\n\n#### `proto` option\n\nIt's faster to allow enumerable properties on the prototype \nto be copied into the cloned object (not onto it's prototype,\ndirectly onto the object).\n\nTo explain by way of code: \n\n```js\nrequire('rfdc')({ proto: false })(Object.create({a: 1})) // => {}\nrequire('rfdc')({ proto: true })(Object.create({a: 1})) // => {a: 1}\n``` \n\nIf this behavior is acceptable, set\n`proto` to `true` for an additional 15% performance boost\n(see benchmarks).\n\n#### `circles` option\n\nKeeping track of circular references will slow down performance\nwith an additional 40%-50% overhead (even if an object doesn't have\nany circular references, the tracking is the cost). By default if \nan object with a circular reference is passed in, `rfdc` will throw (similar to\nhow `JSON.stringify` would throw). \n\nUse the `circles` option to detect and preserve circular references\nin the object. If performance is important, try removing the \ncircular reference from the object (set to `undefined`) and then\nadd it back manually after cloning instead of using this option.\n\n### Types\n\n`rdfc` clones all JSON types:\n\n* `Object` \n* `Array`\n* `Number`\n* `String`\n* `null`\n\nWith additional support for:\n\n* `Date` (copied)\n* `undefined` (copied)\n* `Function` (referenced)\n* `AsyncFunction` (referenced)\n* `GeneratorFunction` (referenced)\n* `arguments` (copied to a normal object)\n\nAll other types have output values that match the output\nof `JSON.parse(JSON.stringify(o))`.\n\nFor instance: \n\n```js\nconst rdfc = require('rdfc')()\nconst err = Error()\nerr.code = 1\nJSON.parse(JSON.stringify(e)) // {code: 1}\nrdfc(e) // {code: 1}\n\nJSON.parse(JSON.stringify(new Uint8Array([1, 2, 3]))) //  {'0': 1, '1': 2, '2': 3 }\nrdfc(new Uint8Array([1, 2, 3])) //  {'0': 1, '1': 2, '2': 3 }\n\nJSON.parse(JSON.stringify({rx: /foo/})) // {rx: {}}\nrdfc({rx: /foo/}) // {rx: {}}\n```\n\n## Benchmarks\n\n```sh\nnpm run bench\n```\n\n```\nbenchDeepCopy*100: 687.014ms\nbenchLodashCloneDeep*100: 1803.993ms\nbenchFastCopy*100: 929.259ms\nbenchRfdc*100: 565.133ms\nbenchRfdcProto*100: 484.401ms\nbenchRfdcCircles*100: 846.672ms\nbenchRfdcCirclesProto*100: 752.908ms\n```\n\n## Tests\n\n```sh\nnpm test\n```\n\n```\n148 passing (365.985ms)\n```\n\n### Coverage\n\n```sh\nnpm run cov \n```\n\n```\n----------|----------|----------|----------|----------|-------------------|\nFile      |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |\n----------|----------|----------|----------|----------|-------------------|\nAll files |      100 |      100 |      100 |      100 |                   |\n index.js |      100 |      100 |      100 |      100 |                   |\n----------|----------|----------|----------|----------|-------------------|\n```\n\n## License\n\nMIT"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rfdc/-/rfdc-1.1.2.tgz#e6e72d74f5dc39de8f538f65e00c36c18018e349",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rfdc/-/rfdc-1.1.2.tgz",
    "hash": "e6e72d74f5dc39de8f538f65e00c36c18018e349",
    "integrity": "sha512-92ktAgvZhBzYTIK0Mja9uen5q5J3NRVMoDkJL2VMwq6SXjVCgqvQeVP2XAaUY6HT+XpQYeLSjb3UoitBryKmdA==",
    "registry": "npm",
    "packageName": "rfdc"
  },
  "registry": "npm",
  "hash": "e6e72d74f5dc39de8f538f65e00c36c18018e349"
}