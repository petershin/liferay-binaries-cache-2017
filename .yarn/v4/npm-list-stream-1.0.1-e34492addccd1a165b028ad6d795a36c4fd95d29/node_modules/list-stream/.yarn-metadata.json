{
  "manifest": {
    "name": "list-stream",
    "version": "1.0.1",
    "description": "Collect chunks / objects from a readable stream, write obejcts / chunks to a writable stream",
    "main": "list-stream.js",
    "scripts": {
      "test": "node test.js | faucet"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/rvagg/list-stream.git"
    },
    "homepage": "https://github.com/rvagg/list-stream",
    "authors": [
      "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)"
    ],
    "keywords": [
      "buffer",
      "stream"
    ],
    "license": "MIT +no-false-attribs",
    "dependencies": {
      "readable-stream": "~2.0.5",
      "xtend": "~4.0.1"
    },
    "devDependencies": {
      "tape": "~2.3.2",
      "faucet": "0.0.0",
      "through2": "~0.4.1"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-list-stream-1.0.1-e34492addccd1a165b028ad6d795a36c4fd95d29\\node_modules\\list-stream\\package.json",
    "readmeFilename": "README.md",
    "readme": "# ListStream\n\n[![Build Status](https://secure.travis-ci.org/rvagg/list-stream.png)](http://travis-ci.org/rvagg/list-stream)\n\n**Collect chunks / objects from a readable stream, write obejcts / chunks to a writable stream**\n\n[![NPM](https://nodei.co/npm/list-stream.svg)](https://nodei.co/npm/list-stream/)\n\nBuilt on a [DuplexStream](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_duplex), **ListStream** can collect the chunks as they come in so you can use them later as an array, or pipe them on to another stream.\n\nUsing the same callback style as **[bl](https://github.com/rvagg/bl)** and a similar style to **[concat-stream](https://github.com/maxogden/concat-stream)**, you can use **ListStream** as a terminal stream collecting the chunks or objects for use once the stream has ended. This is particularly helpful for object streams where each chunk is a discrete object.\n\n```js\nvar ListStream = require('list-stream')\n  , db = require('level')('/path/to/db', { valueEncoding: 'json' }) // stream from LevelDB!\n\ndb.createValueStream().pipe(ListStream.obj(function (err, data) {\n  if (err)\n    throw err\n\n  console.log('Values in the database:')\n  // `data` is an array of objects from the database, serialised from JSON strings\n  data.forEach(function (value, i) {\n    console.log(i, JSON.stringify(value))\n  })\n}))\n```\n\nOr emulate `fs.readFile()`:\n\n```js\nvar ListStream = require('list-stream')\n  , fs = require('fs')\n\nfs.createReadStream('/path/to/file.dat').pipe(ListStream(function (err, data) {\n  if (err)\n    throw err\n\n  console.log('Contents of /path/to/file.dat:')\n  // `data` is an array of Buffer objects\n  console.log(Buffer.concat(data).toString('utf8'))\n}))\n```\n\n*See [bl](https://github.com/rvagg/bl) for nicer Buffer stream handling*\n\nOr use as a store to stream from later\n\n```js\nvar list = require('list-stream').obj()\n  , db = require('level')('/path/to/db')\n\nlist.write({ key: 'name', value: 'Yuri Irsenovich Kim' })\nlist.write({ key: 'dob', value: '16 February 1941' })\nlist.write({ key: 'spouse', value: 'Kim Young-sook' })\nlist.write({ key: 'occupation', value: 'Clown' })\n\nlist.pipe(db.createWriteStream()) // write all of the stored entries to a database\n```\n\n## API\n\n  * <a href=\"#ctor\"><code><b>[new ]ListStream([ options, ][ callback ])</b></code></a>\n  * <a href=\"#obj\"><code><b>ListStream.obj([ options, ][ callback ])</b></code></a>\n  * <a href=\"#length\"><code>listStream.<b>length</b></code></a>\n  * <a href=\"#append\"><code>listStream.<b>append(obj)</b></code></a>\n  * <a href=\"#get\"><code>listStream.<b>get(index)</b></code></a>\n  * <a href=\"#end\"><code>listStream.<b>end()</b></code></a>\n  * <a href=\"#duplicate\"><code>listStream.<b>duplicate()</b></code></a>\n\n\n--------------------------------------------------------\n<a name=\"ctor\"></a>\n### [new ]ListStream([ options, ][ callback ])\n\nCreate a new **ListStream** with the given `options` which will be passed up to the parent `DuplexStream`.\n\nThe optional `callback` will be called when the stream reaches an *end* event. You will receive both an `error` argument and a `data` argument where the `error` will come off `'error'` events emitted by any piped stream and the `data` will be an **`Array`** of chunks or objects fed in to the stream.\n\n--------------------------------------------------------\n<a name=\"obj\"></a>\n### ListStream.obj([ options, ][ callback ])\n\nSame as the standard constructor but shorthand for `new ListStream({ objectMode:true }, callback)`.\n\nUse this for when you're not dealing with `Buffer`s or `String`s in your streams.\n\n--------------------------------------------------------\n<a name=\"length\"></a>\n### listStream.length\n\nThe number of chunks currently being held. (Not available in pre-ES5 environments as it uses a *getter*)\n\n--------------------------------------------------------\n<a name=\"append\"></a>\n### listStream.append(obj)\n\nAppend a chunk / object to the list.\n\n--------------------------------------------------------\n<a name=\"get\"></a>\n### listStream.get(index)\n\nGet the chunk / object from the list at index `index`.\n\n--------------------------------------------------------\n<a name=\"get\"></a>\n### listStream.end()\n\nEnd the stream. A standard *WritableStream* method, can be used when piping to another stream:\n\n```js\nlistStream.pipe(fs.createWriteStream(os.tmpDir() + '/randombytes.dat'))\n\nfor (var i = 0; i < 100)\n  listStream.append(crypto.randomBytes(32))\n\nlistStream.end()\n```\n\n--------------------------------------------------------\n<a name=\"duplicate\"></a>\n### listStream.duplicate()\n\nCreate a full duplicate of this `ListStream`. Each item in the list will be `.append()`ed to the new copy. The copy will be returned.\n\n\n## License\n\n**ListStream** is Copyright (c) 2014 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n",
    "licenseText": "Copyright 2013, Rod Vagg (the \"Original Author\")\nAll rights reserved.\n\nMIT +no-false-attribs License\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nDistributions of all or part of the Software intended to be used\nby the recipients as they would use the unmodified Software,\ncontaining modifications that substantially alter, remove, or\ndisable functionality of the Software, outside of the documented\nconfiguration mechanisms provided by the Software, shall be\nmodified such that the Original Author's bug reporting email\naddresses and urls are either replaced with the contact information\nof the parties responsible for the changes, or removed entirely.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\nExcept where noted, this license applies to any and all software\nprograms and associated documentation files created by the\nOriginal Author, when distributed with the Software."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/list-stream/-/list-stream-1.0.1.tgz#e34492addccd1a165b028ad6d795a36c4fd95d29",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/list-stream/-/list-stream-1.0.1.tgz",
    "hash": "e34492addccd1a165b028ad6d795a36c4fd95d29",
    "integrity": "sha1-40SSrdzNGhZbAorW15WjbE/ZXSk=",
    "registry": "npm",
    "packageName": "list-stream"
  },
  "registry": "npm",
  "hash": "e34492addccd1a165b028ad6d795a36c4fd95d29"
}