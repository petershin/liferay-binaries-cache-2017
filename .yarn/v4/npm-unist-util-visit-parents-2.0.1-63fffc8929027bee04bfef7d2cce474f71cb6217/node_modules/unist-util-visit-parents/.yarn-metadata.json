{
  "manifest": {
    "name": "unist-util-visit-parents",
    "version": "2.0.1",
    "description": "Recursively walk over unist nodes, with ancestral information",
    "license": "MIT",
    "keywords": [
      "unist",
      "walk",
      "util",
      "utility"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/unist-util-visit-parents.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/unist-util-visit-parents/issues"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "http://wooorm.com"
      }
    ],
    "files": [
      "index.js"
    ],
    "dependencies": {
      "unist-util-is": "^2.1.2"
    },
    "devDependencies": {
      "browserify": "^16.0.0",
      "nyc": "^12.0.0",
      "prettier": "^1.12.1",
      "remark": "^9.0.0",
      "remark-cli": "^5.0.0",
      "remark-preset-wooorm": "^4.0.0",
      "tape": "^4.5.1",
      "tinyify": "^2.4.3",
      "xo": "^0.21.0"
    },
    "scripts": {
      "format": "remark . -qfo && prettier --write '**/*.js' && xo --fix",
      "build-bundle": "browserify index.js -s unistUtilVisitParents > unist-util-visit-parents.js",
      "build-mangle": "browserify index.js -s unistUtilVisitParents -p tinyify > unist-util-visit-parents.min.js",
      "build": "npm run build-bundle && npm run build-mangle",
      "test-api": "node test",
      "test-coverage": "nyc --reporter lcov tape test.js",
      "test": "npm run format && npm run build && npm run test-coverage"
    },
    "nyc": {
      "check-coverage": true,
      "lines": 100,
      "functions": 100,
      "branches": 100
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "esnext": false,
      "rules": {
        "guard-for-in": "off",
        "no-var": "off",
        "prefer-arrow-callback": "off"
      },
      "ignores": [
        "unist-util-visit-parents.js"
      ]
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-unist-util-visit-parents-2.0.1-63fffc8929027bee04bfef7d2cce474f71cb6217\\node_modules\\unist-util-visit-parents\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# unist-util-visit-parents [![Build Status][build-badge]][build-page] [![Coverage Status][coverage-badge]][coverage-page]\n\n[Unist][] node visitor, with ancestral information.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install unist-util-visit-parents\n```\n\n## Usage\n\n```javascript\nvar remark = require('remark')\nvar visit = require('unist-util-visit-parents')\n\nvar tree = remark.parse('Some _emphasis_, **importance**, and `code`.')\n\nvisit(tree, 'strong', visitor)\n\nfunction visitor(node, ancestors) {\n  console.log(ancestors)\n}\n```\n\nYields:\n\n```js\n[ { type: 'root', children: [ [Object] ] },\n  { type: 'paragraph',\n    children:\n     [ [Object],\n       [Object],\n       [Object],\n       [Object],\n       [Object],\n       [Object],\n       [Object] ] } ]\n```\n\n## API\n\n### `visit(tree[, test], visitor[, reverse])`\n\nVisit nodes ([**inclusive descendants**][descendant] of [`tree`][tree]), with\nancestral information.  Optionally filtering nodes.  Optionally in reverse.\n\n###### Parameters\n\n*   `tree` ([`Node`][node]) — Tree to traverse\n*   `test` ([`Test`][is], optional) — [`is`][is]-compatible test (such as a\n    node type)\n*   `visitor` ([Function][visitor]) — Function invoked when a node is found\n    that passes `test`\n*   `reverse` (`boolean`, default: `false`) — The tree is walked in [preorder][]\n    (NLR), visiting the node itself, then its [head][], etc.\n    When `reverse` is passed, the tree is stilled walked in preorder, but now\n    in NRL (the node itself, then its [tail][], etc.)\n\n#### `next? = visitor(node, ancestors)`\n\nInvoked when a node (matching `test`, if given) is found.\n\nVisitors are free to transform `node`.\nThey can also transform the [parent][] of node (the last of `ancestors`).\nReplacing `node` itself, if `visit.SKIP` is not returned, still causes its\n[descendant][]s to be visited.\nIf adding or removing previous [sibling][]s (or next siblings, in case of\n`reverse`) of `node`, `visitor` should return a new [`index`][index] (`number`)\nto specify the sibling to traverse after `node` is traversed.\nAdding or removing next siblings of `node` (or previous siblings, in case of\nreverse) is handled as expected without needing to return a new `index`.\nRemoving the `children` property of parent still results in them being\ntraversed.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Found node\n*   `ancestors` (`Array.<Node>`) — [Ancestor][]s of `node`\n\n###### Returns\n\n*   `visit.EXIT` (`false`) — Stop traversing immediately\n*   `visit.CONTINUE` (`true`) — Continue traversing as normal (same behaviour\n    as not returning anything)\n*   `visit.SKIP` (`'skip'`) — Do not traverse this node’s children; continue\n    with the next sibling\n*   [`index`][index] (`number`) — Move to the sibling at `index` next (after\n    `node` itself is completely traversed).\n    Useful if mutating the tree, such as removing the node the visitor is\n    currently on, or any of its previous siblings (or next siblings, in case of\n    `reverse`)\n    Results less than `0` or greater than or equal to `children.length` stop\n    traversing the parent\n\n## Related\n\n*   [`unist-util-visit`](https://github.com/syntax-tree/unist-util-visit)\n    — Like `visit-parents`, but with one parent\n*   [`unist-util-filter`](https://github.com/eush77/unist-util-filter)\n    — Create a new tree with all nodes that pass a test\n*   [`unist-util-map`](https://github.com/syntax-tree/unist-util-map)\n    — Create a new tree with all nodes mapped by a given function\n*   [`unist-util-flatmap`](https://gitlab.com/staltz/unist-util-flatmap)\n    — Create a new tree by mapping (to an array) with the provided function and\n    then flattening\n*   [`unist-util-remove`](https://github.com/eush77/unist-util-remove)\n    — Remove nodes from a tree that pass a test\n*   [`unist-util-select`](https://github.com/eush77/unist-util-select)\n    — Select nodes with CSS-like selectors\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/unist`][contributing] for ways to get\nstarted.\n\nThis organisation has a [Code of Conduct][coc].  By interacting with this\nrepository, organisation, or community you agree to abide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definition -->\n\n[build-badge]: https://img.shields.io/travis/syntax-tree/unist-util-visit-parents.svg\n\n[build-page]: https://travis-ci.org/syntax-tree/unist-util-visit-parents\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/unist-util-visit-parents.svg\n\n[coverage-page]: https://codecov.io/github/syntax-tree/unist-util-visit-parents?branch=master\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: LICENSE\n\n[author]: http://wooorm.com\n\n[unist]: https://github.com/syntax-tree/unist\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[visitor]: #next--visitornode-ancestors\n\n[contributing]: https://github.com/syntax-tree/unist/blob/master/contributing.md\n\n[coc]: https://github.com/syntax-tree/unist/blob/master/code-of-conduct.md\n\n[is]: https://github.com/syntax-tree/unist-util-is\n\n[preorder]: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/\n\n[descendant]: https://github.com/syntax-tree/unist#descendant\n\n[head]: https://github.com/syntax-tree/unist#head\n\n[tail]: https://github.com/syntax-tree/unist#tail\n\n[parent]: https://github.com/syntax-tree/unist#parent-1\n\n[sibling]: https://github.com/syntax-tree/unist#sibling\n\n[index]: https://github.com/syntax-tree/unist#index\n\n[ancestor]: https://github.com/syntax-tree/unist#ancestor\n\n[tree]: https://github.com/syntax-tree/unist#tree\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unist-util-visit-parents/-/unist-util-visit-parents-2.0.1.tgz#63fffc8929027bee04bfef7d2cce474f71cb6217",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unist-util-visit-parents/-/unist-util-visit-parents-2.0.1.tgz",
    "hash": "63fffc8929027bee04bfef7d2cce474f71cb6217",
    "integrity": "sha512-6B0UTiMfdWql4cQ03gDTCSns+64Zkfo2OCbK31Ov0uMizEz+CJeAp0cgZVb5Fhmcd7Bct2iRNywejT0orpbqUA==",
    "registry": "npm",
    "packageName": "unist-util-visit-parents"
  },
  "registry": "npm",
  "hash": "63fffc8929027bee04bfef7d2cce474f71cb6217"
}