{
  "manifest": {
    "name": "parsimmon",
    "version": "1.12.0",
    "description": "A monadic LL(infinity) parser combinator library",
    "keywords": [
      "parsing",
      "parse",
      "parsers",
      "parser combinators"
    ],
    "author": {
      "name": "Jeanine Adkisson",
      "email": "jneen at jneen dot net"
    },
    "contributors": [
      {
        "name": "Brian Mock",
        "email": "brian@mockbrian.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/jneen/parsimmon"
    },
    "files": [
      "src",
      "build"
    ],
    "main": "src/parsimmon.js",
    "browser": "build/parsimmon.umd.min.js",
    "devDependencies": {
      "coveralls": "^2.13.1",
      "eslint": "^3.6.0",
      "mkdirp": "^0.5.1",
      "mocha": "^3.4.2",
      "nyc": "^11.0.3",
      "prettier": "1.13.4",
      "rimraf": "^2.5.4",
      "webpack": "^4.6.0",
      "webpack-cli": "^2.0.15"
    },
    "license": "MIT",
    "scripts": {
      "preversion": "npm test",
      "postversion": "git push && git push --tags && npm publish",
      "prebuild": "rimraf build && mkdirp build",
      "build": "webpack -p",
      "prepublishOnly": "npm run test && npm run build",
      "lint": "prettier --list-different '{examples,src,test}/**/*.js' webpack.config.js && eslint examples src test webpack.config.js",
      "lint:fix": "prettier --write '{examples,src,test}/**/*.js' webpack.config.js && eslint --fix examples src test webpack.config.js",
      "precoverage": "npm run test",
      "coverage": "nyc report --reporter=text-lcov | coveralls",
      "pretest": "npm run lint",
      "test": "nyc --reporter=lcov --reporter=text-summary npm run test:mocha",
      "test:mocha": "mocha --reporter dot",
      "test:watch": "mocha --reporter min --watch"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-parsimmon-1.12.0-886a442fb30b5fc3c8e7c4994050f5cdcfe0ea90\\node_modules\\parsimmon\\package.json",
    "readmeFilename": "README.md",
    "readme": "<a href=\"https://badge.fury.io/js/parsimmon\"><img src=\"https://badge.fury.io/js/parsimmon.svg\" alt=\"\"></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img alt=\"\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"></a>\n<a href=\"https://coveralls.io/github/jneen/parsimmon?branch=master\"><img alt=\"\" src=\"https://coveralls.io/repos/github/jneen/parsimmon/badge.svg?branch=master\"/></a>\n<a href=\"https://travis-ci.org/jneen/parsimmon\"><img alt=\"\" src=\"https://api.travis-ci.org/jneen/parsimmon.svg\"></a>\n\n<a href=\"https://github.com/jneen/parsimmon\"><img align=\"right\" src=\"https://i.imgur.com/wyKOf.png\" alt=\"Parsimmon\"></a>\n\n# Parsimmon\n\n**Authors:** [@jneen][] and [@laughinghan][]\n\n**Maintainer:** [@wavebeem][]\n\nParsimmon is a small library for writing big parsers made up of lots of little parsers. The API is inspired by [parsec][] and [Promises/A+][promises-aplus].\n\nParsimmon supports IE7 and newer browsers, along with [Node.js][]. It can be used as a standard Node module through [npm][] (named `parsimmon`), or directly in the browser through a script tag, where it exports a global variable called `Parsimmon`. To download the latest browser build, use the [unpkg version][]. For more information on how to use unpkg, see the [unpkg homepage][].\n\n<!--\n\nParsimmon is officially tested against Node.js 4.x and higher. It should also work in [browsers with ES5 support][es5] (IE9* and up).\n\nIf you need IE8 support, you may be able to get Parsimmon to work by using [es5-shim][], but this is **not officially supported**. Alternately, you can use an older version of Parsimmon which supports IE8.\n\n\\* _IE9 does not support \"strict mode\", but Parsimmon does not require it._\n\n## Module usage\n\n```\nnpm install --save parsimmon\n```\n\n## Browser usage\n\n To download the latest browser build, use the [unpkg version][]. Parsimmon is exposed as a global variable called `Parsimmon`. For more information on how to use unpkg, see the [unpkg homepage][].\n\n-->\n\n## API Documentation\n\n[Full API documentation in `API.md`.][api]\n\n## Examples\n\nSee the [examples][] directory for annotated examples of parsing JSON, Lisp, a Python-ish language, and math.\n\n## Basics\n\nA Parsimmon parser is an object that represents an action on a stream of text, and the promise of either an object yielded by that action on success or a message in case of failure. For example, `Parsimmon.string('foo')` yields the string `'foo'` if the beginning of the stream is `'foo'`, and otherwise fails.\n\nThe method `.map` is used to transform the yielded value. For example,\n\n```javascript\nParsimmon.string(\"foo\").map(function(x) {\n  return x + \"bar\";\n});\n```\n\nwill yield `'foobar'` if the stream starts with `'foo'`. The parser\n\n```javascript\nParsimmon.regexp(/[0-9]+/).map(function(x) {\n  return Number(x) * 2;\n});\n```\n\nwill yield the number `24` when it encounters the string `'12'`.\n\nCalling `.parse(string)` on a parser parses the string and returns an object with a boolean `status` flag, indicating whether the parse succeeded. If it succeeded, the `value` attribute will contain the yielded value. Otherwise, the `index` and `expected` attributes will contain the index of the parse error (with `offset`, `line` and `column` properties), and a sorted, unique array of messages indicating what was expected.\n\nThe error object can be passed along with the original source to `Parsimmon.formatError(source, error)` to obtain a human-readable error string.\n\nNote: If you prefer throwing an error when the parse failed, call [`.tryParse(string)`](API.md#parsertryparseinput) instead. The returned value will be the parsing result itself when succeeded.\n\n## Common Functions\n\n- [`.createLanguage(parsers)`](API.md#parsimmoncreatelanguageparsers)\n- [`.string(string)`](API.md#parsimmonstringstring)\n- [`.regexp(regexp)`](API.md#parsimmonregexpregexp)\n- [`.seq(p1, p2, ...pn)`](API.md#parsimmonseqp1-p2-pn)\n- [`.sepBy(content, separator)`](API.md#parsimmonsepbycontent)\n- [`.alt(p1, p2, ...pn)`](API.md#parsimmonaltp1-p2-pn)\n- [`.whitespace`](API.md#parsimmonwhitespace)\n- [`.index`](API.md#parsimmonindex)\n- [`parser.map(fn)`](API.md#parsermapfn)\n- [`parser.node(name)`](API.md#parsernodename)\n- [`parser.skip(otherParser)`](API.md#parserskipotherparser)\n\n## Questions\n\nFeel free to ask a question by filing a GitHub Issue. I'm happy to help point you in the right direction with the library, and hopefully improve the documentation so less people get confused in the future.\n\n## Contributing\n\nContributions are _not_ just pull requests.\n\nIssues clearly describing bugs or confusing parts of Parsimmon are welcome! Also, documentation enhancements and examples are very desirable.\n\nFeeling overwhelmed about contributing? Open an issue about what you want to contribute and I'm happy to help you through to completion!\n\n## Performance\n\nThanks to [@bd82][] we have a good [benchmark comparing Parsimmon CPU performance to several other parser libraries][perf] with a simple JSON parser example.\n\n<a href=\"https://github.com/fantasyland/fantasy-land\"><img align=\"right\" alt=\"Fantasy Land\" src=\"https://github.com/fantasyland/fantasy-land/raw/master/logo.png\"></a>\n\n## Fantasyland\n\nParsimmon is also compatible with [fantasyland][]. It implements Semigroup, Apply, Applicative, Functor, Chain, and Monad.\n\n[@bd82]: https://github.com/bd82\n[@laughinghan]: https://github.com/laughinghan\n[@jneen]: https://github.com/jneen\n[@wavebeem]: https://github.com/wavebeem\n[api]: https://github.com/jneen/parsimmon/blob/master/API.md\n[examples]: https://github.com/jneen/parsimmon/tree/master/examples\n[unpkg homepage]: https://unpkg.com/#/\n[unpkg version]: https://unpkg.com/parsimmon\n[npm]: https://www.npmjs.com/\n[node.js]: https://nodejs.org/en/\n[promises-aplus]: https://promisesaplus.com/\n[parsec]: https://hackage.haskell.org/package/parsec\n[fantasyland]: https://github.com/fantasyland/fantasy-land\n[perf]: https://sap.github.io/chevrotain/performance/\n[es5]: https://kangax.github.io/compat-table/es5/\n[es5-shim]: https://github.com/es-shims/es5-shim\n",
    "licenseText": "# MIT license.  See http://www.opensource.org/licenses/mit-license.php\n\nCopyright (c) 2011-present J. Adkisson (http://jneen.net).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/parsimmon/-/parsimmon-1.12.0.tgz#886a442fb30b5fc3c8e7c4994050f5cdcfe0ea90",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/parsimmon/-/parsimmon-1.12.0.tgz",
    "hash": "886a442fb30b5fc3c8e7c4994050f5cdcfe0ea90",
    "integrity": "sha512-uC/BjuSfb4jfaWajKCp1mVncXXq+V1twbcYChbTxN3GM7fn+8XoHwUdvUz+PTaFtDSCRQxU8+Rnh+iMhAkVwdw==",
    "registry": "npm",
    "packageName": "parsimmon"
  },
  "registry": "npm",
  "hash": "886a442fb30b5fc3c8e7c4994050f5cdcfe0ea90"
}