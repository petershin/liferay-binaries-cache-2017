{
  "manifest": {
    "name": "jest-dom",
    "version": "3.0.1",
    "description": "Custom jest matchers to test the state of the DOM",
    "main": "dist/index.js",
    "engines": {
      "node": "> 4",
      "npm": "> 3"
    },
    "scripts": {
      "add-contributor": "kcd-scripts contributors add",
      "format": "kcd-scripts format",
      "build": "kcd-scripts build",
      "lint": "kcd-scripts lint",
      "test": "kcd-scripts test",
      "test:all": "npm test && npm test -- --env jsdom",
      "test:update": "npm test -- --updateSnapshot --coverage",
      "validate": "kcd-scripts validate build,lint,test:all",
      "setup": "npm install && npm run validate -s",
      "precommit": "kcd-scripts precommit"
    },
    "files": [
      "dist",
      "extend-expect.js",
      "extend-expect.d.ts"
    ],
    "keywords": [
      "testing",
      "dom",
      "jest",
      "jsdom"
    ],
    "author": {
      "name": "Ernesto Garcia",
      "email": "gnapse@gmail.com",
      "url": "http://gnapse.github.io/"
    },
    "license": "MIT",
    "dependencies": {
      "chalk": "^2.4.1",
      "css": "^2.2.3",
      "jest-diff": "^24.0.0",
      "jest-matcher-utils": "^24.0.0",
      "lodash": "^4.17.11",
      "pretty-format": "^24.0.0",
      "redent": "^2.0.0"
    },
    "devDependencies": {
      "jsdom": "^12.2.0",
      "kcd-scripts": "^0.44.0"
    },
    "eslintConfig": {
      "extends": "./node_modules/kcd-scripts/eslint.js",
      "rules": {
        "babel/no-invalid-this": "off",
        "import/prefer-default-export": "off",
        "import/no-unassigned-import": "off"
      }
    },
    "eslintIgnore": [
      "node_modules",
      "coverage",
      "dist"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/gnapse/jest-dom.git"
    },
    "bugs": {
      "url": "https://github.com/gnapse/jest-dom/issues"
    },
    "homepage": "https://github.com/gnapse/jest-dom#readme",
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-jest-dom-3.0.1-88ea2e9c919000431b9d1c09f97adf5364eac103\\node_modules\\jest-dom\\package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n<h1>jest-dom</h1>\n\n<a href=\"https://www.emojione.com/emoji/1f989\">\n<img height=\"80\" width=\"80\" alt=\"owl\" src=\"https://raw.githubusercontent.com/gnapse/jest-dom/master/other/owl.png\" />\n</a>\n\n<p>Custom jest matchers to test the state of the DOM</p>\n</div>\n\n<hr />\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npmtrends]\n[![MIT License][license-badge]][license]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-19-orange.svg?style=flat-square)](#contributors)\n[![PRs Welcome][prs-badge]][prs]\n[![Code of Conduct][coc-badge]][coc]\n\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n## The problem\n\nYou want to use [jest][] to write tests that assert various things about the\nstate of a DOM. As part of that goal, you want to avoid all the repetitive\npatterns that arise in doing so. Checking for an element's attributes, its text\ncontent, its css classes, you name it.\n\n## This solution\n\nThe `jest-dom` library provides a set of custom jest matchers that you can use\nto extend jest. These will make your tests more declarative, clear to read and\nto maintain.\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Custom matchers](#custom-matchers)\n  - [`toBeDisabled`](#tobedisabled)\n  - [`toBeEmpty`](#tobeempty)\n  - [`toBeInTheDocument`](#tobeinthedocument)\n  - [`toBeVisible`](#tobevisible)\n  - [`toContainElement`](#tocontainelement)\n  - [`toContainHTML`](#tocontainhtml)\n  - [`toHaveAttribute`](#tohaveattribute)\n  - [`toHaveClass`](#tohaveclass)\n  - [`toHaveFocus`](#tohavefocus)\n  - [`toHaveFormValues`](#tohaveformvalues)\n  - [`toHaveStyle`](#tohavestyle)\n  - [`toHaveTextContent`](#tohavetextcontent)\n- [Deprecated matchers](#deprecated-matchers)\n  - [`toBeInTheDOM`](#tobeinthedom)\n- [Inspiration](#inspiration)\n- [Other Solutions](#other-solutions)\n- [Guiding Principles](#guiding-principles)\n- [Contributors](#contributors)\n- [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and\nshould be installed as one of your project's `devDependencies`:\n\n```\nnpm install --save-dev jest-dom\n```\n\n## Usage\n\nImport `jest-dom/extend-expect` once (for instance in your [tests setup file][])\nand you're good to go:\n\n[tests setup file]: https://facebook.github.io/jest/docs/en/configuration.html#setuptestframeworkscriptfile-string\n\n```javascript\nimport 'jest-dom/extend-expect'\n```\n\nAlternatively, you can selectively import only the matchers you intend to use,\nand extend jest's `expect` yourself:\n\n```javascript\nimport {toBeInTheDocument, toHaveClass} from 'jest-dom'\n\nexpect.extend({toBeInTheDocument, toHaveClass})\n```\n\n> Note: when using TypeScript, this way of importing matchers won't provide the\n> necessary type definitions. More on this [here](https://github.com/gnapse/jest-dom/pull/11#issuecomment-387817459).\n\n## Custom matchers\n\n`jest-dom` can work with any library or framework that returns DOM elements from queries. The custom matcher examples below demonstrate using `document.querySelector` and [dom-testing-library](https://github.com/kentcdodds/dom-testing-library) for querying DOM elements.\n\n### `toBeDisabled`\n\n```typescript\ntoBeDisabled()\n```\n\nThis allows you to check whether an element is disabled from the user's perspective.\n\nIt matches if the element is a form control and the `disabled` attribute is\nspecified on this element or the element is a descendant of a form element\nwith a `disabled` attribute.\n\nAccording to the specification, the following elements can be [actually disabled](https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements):\n`button`, `input`, `select`, `textarea`, `optgroup`, `option`, `fieldset`.\n\n#### Examples\n\n```html\n<button data-testid=\"button\" type=\"submit\" disabled>submit</button>\n<fieldset disabled><input type=\"text\" data-testid=\"input\" /></fieldset>\n<a href=\"...\" disabled>link</a>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"button\"]')).toBeDisabled()\nexpect(document.querySelector('[data-testid=\"input\"]')).toBeDisabled()\nexpect(document.querySelector('a')).not.toBeDisabled()\n```\n\n##### Using dom-testing-library\n\n```javascript\nexpect(getByTestId(container, 'button')).toBeDisabled()\nexpect(getByTestId(container, 'input')).toBeDisabled()\nexpect(getByText(container, 'link')).not.toBeDisabled()\n```\n\n<hr />\n\n### `toBeEmpty`\n\n```typescript\ntoBeEmpty()\n```\n\nThis allows you to assert whether an element has content or not.\n\n#### Examples\n\n```html\n<span data-testid=\"not-empty\"><span data-testid=\"empty\"></span></span>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"empty\"]').toBeEmpty()\nexpect(document.querySelector('[data-testid=\"not-empty\"]').not.toBeEmpty()\n```\n\n##### Using dom-testing-library\n\n```javascript\nexpect(queryByTestId(container, 'empty')).toBeEmpty()\nexpect(queryByTestId(container, 'not-empty')).not.toBeEmpty()\n```\n\n<hr />\n\n### `toBeInTheDocument`\n\n```typescript\ntoBeInTheDocument()\n```\n\nThis allows you to assert whether an element is present in the document or not.\n\n#### Examples\n\n```html\n<span data-testid=\"html-element\"><span>Html Element</span></span>\n<svg data-testid=\"svg-element\"></svg>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst htmlElement = document.querySelector('[data-testid=\"html-element\"]')\nconst svgElement = document.querySelector('[data-testid=\"svg-element\"]')\nconst nonExistantElement = document.querySelector('does-not-exist')\nconst detachedElement = document.createElement('div')\n\nexpect(htmlElement).toBeInTheDocument()\nexpect(svgElement).toBeInTheDocument()\nexpect(nonExistantElement).not.toBeInTheDocument()\nexpect(detachedElement).not.toBeInTheDocument()\n```\n\n##### Using dom-testing-library\n\n```javascript\nexpect(\n  queryByTestId(document.documentElement, 'html-element'),\n).toBeInTheDocument()\nexpect(\n  queryByTestId(document.documentElement, 'svg-element'),\n).toBeInTheDocument()\nexpect(\n  queryByTestId(document.documentElement, 'does-not-exist'),\n).not.toBeInTheDocument()\n```\n\n> Note: This matcher does not find detached elements. The element must be added to the document to be found by toBeInTheDocument. If you desire to search in a detached element please use: [`toContainElement`](#tocontainelement)\n\n<hr />\n\n### `toBeVisible`\n\n```typescript\ntoBeVisible()\n```\n\nThis allows you to check if an element is currently visible to the user.\n\nAn element is visible if **all** the following conditions are met:\n\n- it does not have its css property `display` set to `none`\n- it does not have its css property `visibility` set to either `hidden` or\n  `collapse`\n- it does not have its css property `opacity` set to `0`\n- its parent element is also visible (and so on up to the top of the DOM tree)\n\n#### Examples\n\n```html\n<div data-testid=\"zero-opacity\" style=\"opacity: 0\">Zero Opacity Example</div>\n<div data-testid=\"visibility-hidden\" style=\"visibility: hidden\">\n  Visibility Hidden Example\n</div>\n<div data-testid=\"display-none\" style=\"display: none\">Display None Example</div>\n<div style=\"opacity: 0\">\n  <span data-testid=\"hidden-parent\">Hidden Parent Example</span>\n</div>\n<div data-testid=\"visible\">Visible Example</div>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"zero-opacity\"]'])).not.toBeVisible()\nexpect(document.querySelector('[data-testid=\"visibility-hidden\"]'])).not.toBeVisible()\nexpect(document.querySelector('[data-testid=\"display-none\"]'])).not.toBeVisible()\nexpect(document.querySelector('[data-testid=\"hidden-parent\"]'])).not.toBeVisible()\nexpect(document.querySelector('[data-testid=\"visible\"]'])).toBeVisible()\n```\n\n##### Using dom-testing-library\n\n```javascript\nexpect(getByText(container, 'Zero Opacity Example')).not.toBeVisible()\nexpect(getByText(container, 'Visibility Hidden Example')).not.toBeVisible()\nexpect(getByText(container, 'Display None Example')).not.toBeVisible()\nexpect(getByText(container, 'Hidden Parent Example')).not.toBeVisible()\nexpect(getByText(container, 'Visible Example')).toBeVisible()\n```\n\n<hr />\n\n### `toContainElement`\n\n```typescript\ntoContainElement(element: HTMLElement | SVGElement | null)\n```\n\nThis allows you to assert whether an element contains another element as a descendant or not.\n\n#### Examples\n\n```html\n<span data-testid=\"ancestor\"><span data-testid=\"descendant\"></span></span>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst ancestor = document.querySelector('[data-testid=\"ancestor\"]')\nconst descendant = document.querySelector('[data-testid=\"descendant\"]')\nconst nonExistantElement = document.querySelector(\n  '[data-testid=\"does-not-exist\"]',\n)\n\nexpect(ancestor).toContainElement(descendant)\nexpect(descendant).not.toContainElement(ancestor)\nexpect(ancestor).not.toContainElement(nonExistantElement)\n```\n\n##### Using dom-testing-library\n\n```javascript\nconst {queryByTestId} = render(/* Rendered HTML */)\n\nconst ancestor = queryByTestId(container, 'ancestor')\nconst descendant = queryByTestId(container, 'descendant')\nconst nonExistantElement = queryByTestId(container, 'does-not-exist')\n\nexpect(ancestor).toContainElement(descendant)\nexpect(descendant).not.toContainElement(ancestor)\nexpect(ancestor).not.toContainElement(nonExistantElement)\n```\n\n<hr />\n\n### `toContainHTML`\n\n```typescript\ntoContainHTML(htmlText: string)\n```\n\nAssert whether a string representing a HTML element is contained in another element:\n\n#### Examples\n\n```html\n<span data-testid=\"parent\"><span data-testid=\"child\"></span></span>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"parent\"]')).toContainHTML(\n  '<span data-testid=\"child\"></span>',\n)\n```\n\n##### Using dom-testing-library\n\n```javascript\nexpect(getByTestId(container, 'parent')).toContainHTML(\n  '<span data-testid=\"child\"></span>',\n)\n```\n\n> Chances are you probably do not need to use this matcher. We encourage testing from the perspective of how the user perceives the app in a browser. That's why testing against a specific DOM structure is not advised.\n>\n> It could be useful in situations where the code being tested renders html that was obtained from an external source, and you want to validate that that html code was used as intended.\n>\n> It should not be used to check DOM structure that you control. Please use [`toContainElement`](#tocontainelement) instead.\n\n<hr />\n\n### `toHaveAttribute`\n\n```typescript\ntoHaveAttribute(attr: string, value?: string)\n```\n\nThis allows you to check whether the given element has an attribute or not. You\ncan also optionally check that the attribute has a specific expected value.\n\n#### Examples\n\n```html\n<button data-testid=\"ok-button\" type=\"submit\" disabled>ok</button>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst button = document.querySelector('[data-testid=\"ok-button\"]')\n\nexpect(button).toHaveAttribute('disabled')\nexpect(button).toHaveAttribute('type', 'submit')\nexpect(button).not.toHaveAttribute('type', 'button')\n```\n\n##### Using dom-testing-library\n\n```javascript\nconst button = getByTestId(container, 'ok-button')\n\nexpect(button).toHaveAttribute('disabled')\nexpect(button).toHaveAttribute('type', 'submit')\nexpect(button).not.toHaveAttribute('type', 'button')\n```\n\n<hr />\n\n### `toHaveClass`\n\n```typescript\ntoHaveClass(...classNames: string[])\n```\n\nThis allows you to check whether the given element has certain classes within its\n`class` attribute.\n\nYou must provide at least one class, unless you are asserting that an element\ndoes not have any classes.\n\n#### Examples\n\n```html\n<button data-testid=\"delete-button\" class=\"btn extra btn-danger\">\n  Delete item\n</button>\n<button data-testid=\"no-classes\">No Classes</button>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst deleteButton = document.querySelector('[data-testid=\"delete-button\"]')\nconst noClasses = document.querySelector('[data-testid=\"no-classes\"]')\n\nexpect(deleteButton).toHaveClass('extra')\nexpect(deleteButton).toHaveClass('btn-danger btn')\nexpect(deleteButton).toHaveClass('btn-danger', 'btn')\nexpect(deleteButton).not.toHaveClass('btn-link')\n\nexpect(noClasses).not.toHaveClass()\n```\n\n##### Using dom-testing-library\n\n```javascript\nconst deleteButton = getByTestId(container, 'delete-button')\nconst noClasses = getByTestId(container, 'no-classes')\n\nexpect(deleteButton).toHaveClass('extra')\nexpect(deleteButton).toHaveClass('btn-danger btn')\nexpect(deleteButton).toHaveClass('btn-danger', 'btn')\nexpect(deleteButton).not.toHaveClass('btn-link')\n\nexpect(noClasses).not.toHaveClass()\n```\n\n<hr />\n\n### `toHaveFocus`\n\n```typescript\ntoHaveFocus()\n```\n\nThis allows you to assert whether an element has focus or not.\n\n#### Examples\n\n```html\n<div><input type=\"text\" data-testid=\"element-to-focus\" /></div>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst input = document.querySelector(['data-testid=\"element-to-focus\"')\n\ninput.focus()\nexpect(input).toHaveFocus()\n\ninput.blur()\nexpect(input).not.toHaveFocus()\n```\n\n##### Using dom-testing-library\n\n```javascript\nconst input = queryByTestId(container, 'element-to-focus')\n\nfireEvent.focus(input)\nexpect(input).toHaveFocus()\n\nfireEvent.blur(input)\nexpect(input).not.toHaveFocus()\n```\n\n<hr />\n\n### `toHaveFormValues`\n\n```typescript\ntoHaveFormValues(expectedValues: {\n  [name: string]: any\n})\n```\n\nThis allows you to check if a form or fieldset contains form controls for each\ngiven name, and having the specified value.\n\n> It is important to stress that this matcher can only be invoked on a [form][]\n> or a [fieldset][] element.\n>\n> This allows it to take advantage of the [.elements][] property in `form` and\n> `fieldset` to reliably fetch all form controls within them.\n>\n> This also avoids the possibility that users provide a container that contains\n> more than one `form`, thereby intermixing form controls that are not related,\n> and could even conflict with one another.\n\nThis matcher abstracts away the particularities with which a form control value\nis obtained depending on the type of form control. For instance, `<input>`\nelements have a `value` attribute, but `<select>` elements do not. Here's a list\nof all cases covered:\n\n- `<input type=\"number\">` elements return the value as a **number**, instead of\n  a string.\n- `<input type=\"checkbox\">` elements:\n  - if there's a single one with the given `name` attribute, it is treated as a\n    **boolean**, returning `true` if the checkbox is checked, `false` if\n    unchecked.\n  - if there's more than one checkbox with the same `name` attribute, they are\n    all treated collectively as a single form control, which returns the value\n    as an **array** containing all the values of the selected checkboxes in the\n    collection.\n- `<input type=\"radio\">` elements are all grouped by the `name` attribute, and\n  such a group treated as a single form control. This form control returns the\n  value as a **string** corresponding to the `value` attribute of the selected\n  radio button within the group.\n- `<input type=\"text\">` elements return the value as a **string**. This also\n  applies to `<input>` elements having any other possible `type` attribute\n  that's not explicitly covered in different rules above (e.g. `search`,\n  `email`, `date`, `password`, `hidden`, etc.)\n- `<select>` elements without the `multiple` attribute return the value as a\n  **string** corresponding to the `value` attribute of the selected `option`, or\n  `undefined` if there's no selected option.\n- `<select multiple>` elements return the value as an **array** containing all\n  the values of the [selected options][].\n- `<textarea>` elements return their value as a **string**. The value\n  corresponds to their node content.\n\nThe above rules make it easy, for instance, to switch from using a single select\ncontrol to using a group of radio buttons. Or to switch from a multi select\ncontrol, to using a group of checkboxes. The resulting set of form values used\nby this matcher to compare against would be the same.\n\n[selected options]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedOptions\n[form]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n[fieldset]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement\n[.elements]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements\n\n#### Examples\n\n```html\n<form data-testid=\"login-form\">\n  <input type=\"text\" name=\"username\" value=\"jane.doe\" />\n  <input type=\"password\" name=\"password\" value=\"12345678\" />\n  <input type=\"checkbox\" name=\"rememberMe\" checked />\n  <button type=\"submit\">Sign in</button>\n</form>\n```\n\n```javascript\nconst form = document.querySelector('[data-testid=\"login-form\"]')\nexpect(form).toHaveFormValues({\n  username: 'jane.doe',\n  rememberMe: true,\n})\n```\n\n### `toHaveStyle`\n\n```typescript\ntoHaveStyle(css: string)\n```\n\nThis allows you to check if a certain element has some specific css properties\nwith specific values applied. It matches only if the element has _all_ the\nexpected properties applied, not just some of them.\n\n#### Examples\n\n```html\n<button data-testid=\"delete-button\" style=\"display: none; color: red\">\n  Delete item\n</button>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst button = document.querySelector(['data-testid=\"delete-button\"')\n\nexpect(button).toHaveStyle('display: none')\nexpect(button).toHaveStyle(`\n  color: red;\n  display: none;\n`)\nexpect(button).not.toHaveStyle(`\n  color: blue;\n  display: none;\n`)\n```\n\n##### Using dom-testing-library\n\n```javascript\nconst button = getByTestId(container, 'delete-button')\n\nexpect(button).toHaveStyle('display: none')\nexpect(button).toHaveStyle(`\n  color: red;\n  display: none;\n`)\nexpect(button).not.toHaveStyle(`\n  color: blue;\n  display: none;\n`)\n```\n\nThis also works with rules that are applied to the element via a class name for\nwhich some rules are defined in a stylesheet currently active in the document.\nThe usual rules of css precedence apply.\n\n<hr />\n\n### `toHaveTextContent`\n\n```typescript\ntoHaveTextContent(text: string | RegExp, options?: {normalizeWhitespace: boolean})\n```\n\nThis allows you to check whether the given element has a text content or not.\n\nWhen a `string` argument is passed through, it will perform a partial case-sensitive match to the element content.\n\nTo perform a case-insensitive match, you can use a `RegExp` with the `/i` modifier.\n\nIf you want to match the whole content, you can use a `RegExp` to do it.\n\n#### Examples\n\n```html\n<span data-testid=\"text-content\">Text Content</span>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst element = document.querySelector('[data-testid=\"text-content\"]')\n\nexpect(element).toHaveTextContent('Content')\nexpect(element).toHaveTextContent(/^Text Content$/) // to match the whole content\nexpect(element).toHaveTextContent(/content$/i) // to use case-insentive match\nexpect(element).not.toHaveTextContent('content')\n```\n\n##### Using dom-testing-library\n\n```javascript\nconst element = getByTestId(container, 'text-content')\n\nexpect(element).toHaveTextContent('Content')\nexpect(element).toHaveTextContent(/^Text Content$/) // to match the whole content\nexpect(element).toHaveTextContent(/content$/i) // to use case-insentive match\nexpect(element).not.toHaveTextContent('content')\n```\n\n<hr />\n\n## Deprecated matchers\n\n### `toBeInTheDOM`\n\n```typescript\ntoBeInTheDOM()\n```\n\nThis allows you to check whether a value is a DOM element, or not.\n\nContrary to what its name implies, this matcher only checks that you passed to\nit a valid DOM element. It does not have a clear definition of that \"the DOM\"\nis. Therefore, it does not check wether that element is contained anywhere.\n\nThis is the main reason why this matcher is deprecated, and will be removed in\nthe next major release. You can follow the discussion around this decision in\nmore detail [here](https://github.com/gnapse/jest-dom/issues/34).\n\nAs an alternative, you can use [`toBeInTheDocument`](#tobeinthedocument)\nor [`toContainElement`](#tocontainelement). Or if you just want to check if a\nvalue is indeed an `HTMLElement` you can always use some of\n[jest's built-in matchers](https://jestjs.io/docs/en/expect#tobeinstanceofclass):\n\n```js\nexpect(document.querySelector('.ok-button')).toBeInstanceOf(HTMLElement)\nexpect(document.querySelector('.cancel-button')).toBeTruthy()\n```\n\n> Note: The differences between `toBeInTheDOM` and `toBeInTheDocument` are\n> significant. Replacing all uses of `toBeInTheDOM` with `toBeInTheDocument`\n> will likely cause unintended consequences in your tests. Please make sure when\n> replacing `toBeInTheDOM` to read through the documentation of the proposed\n> alternatives to see which use case works better for your needs.\n\n## Inspiration\n\nThis whole library was extracted out of Kent C. Dodds' [dom-testing-library][],\nwhich was in turn extracted out of [react-testing-library][].\n\nThe intention is to make this available to be used independently of these other\nlibraries, and also to make it more clear that these other libraries are\nindependent from jest, and can be used with other tests runners as well.\n\n## Other Solutions\n\nI'm not aware of any, if you are please [make a pull request][prs] and add it\nhere!\n\n## Guiding Principles\n\n> [The more your tests resemble the way your software is used, the more confidence they can give you.][guiding-principle]\n\nThis library follows the same guiding principles as its mother library [dom-testing-library][].\nGo [check them out](https://github.com/kentcdodds/dom-testing-library#guiding-principles)\nfor more details.\n\nAdditionally, with respect to custom DOM matchers, this library aims to maintain\na minimal but useful set of them, while avoiding bloating itself with merely\nconvenient ones that can be easily achieved with other APIs. In general, the\noverall criteria for what is considered a useful custom matcher to add to this\nlibrary, is that doing the equivalent assertion on our own makes the test code\nmore verbose, less clear in its intent, and/or harder to read.\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars.githubusercontent.com/u/1500684?v=3\" width=\"100px;\"/><br /><sub><b>Kent C. Dodds</b></sub>](https://kentcdodds.com)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=kentcdodds \"Code\") [📖](https://github.com/gnapse/jest-dom/commits?author=kentcdodds \"Documentation\") [🚇](#infra-kentcdodds \"Infrastructure (Hosting, Build-Tools, etc)\") [⚠️](https://github.com/gnapse/jest-dom/commits?author=kentcdodds \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/2430381?v=4\" width=\"100px;\"/><br /><sub><b>Ryan Castner</b></sub>](http://audiolion.github.io)<br />[📖](https://github.com/gnapse/jest-dom/commits?author=audiolion \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/8008023?v=4\" width=\"100px;\"/><br /><sub><b>Daniel Sandiego</b></sub>](https://www.dnlsandiego.com)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=dnlsandiego \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/12592677?v=4\" width=\"100px;\"/><br /><sub><b>Paweł Mikołajczyk</b></sub>](https://github.com/Miklet)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=Miklet \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/464978?v=4\" width=\"100px;\"/><br /><sub><b>Alejandro Ñáñez Ortiz</b></sub>](http://co.linkedin.com/in/alejandronanez/)<br />[📖](https://github.com/gnapse/jest-dom/commits?author=alejandronanez \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1402095?v=4\" width=\"100px;\"/><br /><sub><b>Matt Parrish</b></sub>](https://github.com/pbomb)<br />[🐛](https://github.com/gnapse/jest-dom/issues?q=author%3Apbomb \"Bug reports\") [💻](https://github.com/gnapse/jest-dom/commits?author=pbomb \"Code\") [📖](https://github.com/gnapse/jest-dom/commits?author=pbomb \"Documentation\") [⚠️](https://github.com/gnapse/jest-dom/commits?author=pbomb \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/1288694?v=4\" width=\"100px;\"/><br /><sub><b>Justin Hall</b></sub>](https://github.com/wKovacs64)<br />[📦](#platform-wKovacs64 \"Packaging/porting to new platform\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/1241511?s=460&v=4\" width=\"100px;\"/><br /><sub><b>Anto Aravinth</b></sub>](https://github.com/antoaravinth)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=antoaravinth \"Code\") [⚠️](https://github.com/gnapse/jest-dom/commits?author=antoaravinth \"Tests\") [📖](https://github.com/gnapse/jest-dom/commits?author=antoaravinth \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/3462296?v=4\" width=\"100px;\"/><br /><sub><b>Jonah Moses</b></sub>](https://github.com/JonahMoses)<br />[📖](https://github.com/gnapse/jest-dom/commits?author=JonahMoses \"Documentation\") | [<img src=\"https://avatars1.githubusercontent.com/u/4002543?v=4\" width=\"100px;\"/><br /><sub><b>Łukasz Gandecki</b></sub>](http://team.thebrain.pro)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=lgandecki \"Code\") [⚠️](https://github.com/gnapse/jest-dom/commits?author=lgandecki \"Tests\") [📖](https://github.com/gnapse/jest-dom/commits?author=lgandecki \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/498274?v=4\" width=\"100px;\"/><br /><sub><b>Ivan Babak</b></sub>](https://sompylasar.github.io)<br />[🐛](https://github.com/gnapse/jest-dom/issues?q=author%3Asompylasar \"Bug reports\") [🤔](#ideas-sompylasar \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/4439618?v=4\" width=\"100px;\"/><br /><sub><b>Jesse Day</b></sub>](https://github.com/jday3)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=jday3 \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/15199?v=4\" width=\"100px;\"/><br /><sub><b>Ernesto García</b></sub>](http://gnapse.github.io)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=gnapse \"Code\") [📖](https://github.com/gnapse/jest-dom/commits?author=gnapse \"Documentation\") [⚠️](https://github.com/gnapse/jest-dom/commits?author=gnapse \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/79312?v=4\" width=\"100px;\"/><br /><sub><b>Mark Volkmann</b></sub>](http://ociweb.com/mark/)<br />[🐛](https://github.com/gnapse/jest-dom/issues?q=author%3Amvolkmann \"Bug reports\") [💻](https://github.com/gnapse/jest-dom/commits?author=mvolkmann \"Code\") |\n| [<img src=\"https://avatars1.githubusercontent.com/u/1659099?v=4\" width=\"100px;\"/><br /><sub><b>smacpherson64</b></sub>](https://github.com/smacpherson64)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=smacpherson64 \"Code\") [📖](https://github.com/gnapse/jest-dom/commits?author=smacpherson64 \"Documentation\") [⚠️](https://github.com/gnapse/jest-dom/commits?author=smacpherson64 \"Tests\") | [<img src=\"https://avatars2.githubusercontent.com/u/132233?v=4\" width=\"100px;\"/><br /><sub><b>John Gozde</b></sub>](https://github.com/jgoz)<br />[🐛](https://github.com/gnapse/jest-dom/issues?q=author%3Ajgoz \"Bug reports\") [💻](https://github.com/gnapse/jest-dom/commits?author=jgoz \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/7830590?v=4\" width=\"100px;\"/><br /><sub><b>Iwona</b></sub>](https://github.com/callada)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=callada \"Code\") [📖](https://github.com/gnapse/jest-dom/commits?author=callada \"Documentation\") [⚠️](https://github.com/gnapse/jest-dom/commits?author=callada \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/840609?v=4\" width=\"100px;\"/><br /><sub><b>Lewis</b></sub>](https://github.com/6ewis)<br />[💻](https://github.com/gnapse/jest-dom/commits?author=6ewis \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/2339362?v=4\" width=\"100px;\"/><br /><sub><b>Leandro Lourenci</b></sub>](https://blog.lourenci.com/)<br />[🐛](https://github.com/gnapse/jest-dom/issues?q=author%3Alourenci \"Bug reports\") [📖](https://github.com/gnapse/jest-dom/commits?author=lourenci \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification.\nContributions of any kind welcome!\n\n## LICENSE\n\nMIT\n\n[jest]: https://facebook.github.io/jest/\n[dom-testing-library]: https://github.com/kentcdodds/dom-testing-library\n[react-testing-library]: https://github.com/kentcdodds/react-testing-library\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/gnapse/jest-dom.svg?style=flat-square\n[build]: https://travis-ci.org/gnapse/jest-dom\n[coverage-badge]: https://img.shields.io/codecov/c/github/gnapse/jest-dom.svg?style=flat-square\n[coverage]: https://codecov.io/github/gnapse/jest-dom\n[version-badge]: https://img.shields.io/npm/v/jest-dom.svg?style=flat-square\n[package]: https://www.npmjs.com/package/jest-dom\n[downloads-badge]: https://img.shields.io/npm/dm/jest-dom.svg?style=flat-square\n[npmtrends]: http://www.npmtrends.com/jest-dom\n[license-badge]: https://img.shields.io/npm/l/jest-dom.svg?style=flat-square\n[license]: https://github.com/gnapse/jest-dom/blob/master/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[donate-badge]: https://img.shields.io/badge/$-support-green.svg?style=flat-square\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/gnapse/jest-dom/blob/master/other/CODE_OF_CONDUCT.md\n[github-watch-badge]: https://img.shields.io/github/watchers/gnapse/jest-dom.svg?style=social\n[github-watch]: https://github.com/gnapse/jest-dom/watchers\n[github-star-badge]: https://img.shields.io/github/stars/gnapse/jest-dom.svg?style=social\n[github-star]: https://github.com/gnapse/jest-dom/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20jest-dom%20by%20%40gnapse%20https%3A%2F%2Fgithub.com%2Fgnapse%2Fjest-dom%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/gnapse/jest-dom.svg?style=social\n[emojis]: https://github.com/kentcdodds/all-contributors#emoji-key\n[all-contributors]: https://github.com/kentcdodds/all-contributors\n[guiding-principle]: https://twitter.com/kentcdodds/status/977018512689455106\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2017 Kent C. Dodds\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jest-dom/-/jest-dom-3.0.1.tgz#88ea2e9c919000431b9d1c09f97adf5364eac103",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jest-dom/-/jest-dom-3.0.1.tgz",
    "hash": "88ea2e9c919000431b9d1c09f97adf5364eac103",
    "integrity": "sha512-wkRQ3UHZhQ9e1v5StJo/pZzH08ywQ0FFVQMmiehJQwWSUeB2D5k37A5rQOS/tRZC/ETRQOxT05JtxWr/w1xUMQ==",
    "registry": "npm",
    "packageName": "jest-dom"
  },
  "registry": "npm",
  "hash": "88ea2e9c919000431b9d1c09f97adf5364eac103"
}