{
  "manifest": {
    "name": "gulp-filter",
    "version": "2.0.2",
    "description": "Filter files in a vinyl stream",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/gulp-filter.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "http://sindresorhus.com"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "test": "mocha"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "gulpplugin",
      "filter",
      "ignore",
      "file",
      "files",
      "match",
      "minimatch",
      "glob",
      "globbing"
    ],
    "dependencies": {
      "gulp-util": "^3.0.0",
      "merge-stream": "^0.1.7",
      "multimatch": "^2.0.0",
      "plexer": "0.0.3",
      "through2": "^0.6.1"
    },
    "devDependencies": {
      "mocha": "*"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-gulp-filter-2.0.2-1ceb1d113ee9942cedd49f5863b42be44bc7cd2c\\node_modules\\gulp-filter\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# gulp-filter [![Build Status](https://travis-ci.org/sindresorhus/gulp-filter.svg?branch=master)](https://travis-ci.org/sindresorhus/gulp-filter)\n\n> Filter files in a [vinyl](https://github.com/wearefractal/vinyl) stream\n\nEnables you to work on a subset of the original files by filtering them using globbing. When you're done and want all the original files back you just call the restore method.\n\n\n## Install\n\n```\n$ npm install --save-dev gulp-filter\n```\n\n\n## Usage\n\n### Simple\n\n```js\nvar gulp = require('gulp');\nvar jscs = require('gulp-jscs');\nvar gulpFilter = require('gulp-filter');\n\ngulp.task('default', function () {\n\t// create filter instance inside task function\n\tvar filter = gulpFilter(['*', '!src/vendor']);\n\n\treturn gulp.src('src/*.js')\n\t\t// filter a subset of the files\n\t\t.pipe(filter)\n\t\t// run them through a plugin\n\t\t.pipe(jscs())\n\t\t// bring back the previously filtered out files (optional)\n\t\t.pipe(filter.restore())\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n### Multiple filters\n\nBy combining and restoring different filters you can process different sets of files with a single pipeline.\n\n```js\nvar gulp = require('gulp');\nvar less = require('gulp-less');\nvar concat = require('gulp-concat');\nvar gulpFilter = require('gulp-filter');\n\ngulp.task('default', function () {\n\tvar jsFilter = gulpFilter('**/*.js');\n\tvar lessFilter = gulpFilter('**/*.less');\n\n\treturn gulp.src('assets/**')\n\t\t.pipe(jsFilter)\n\t\t.pipe(concat('bundle.js'))\n\t\t.pipe(jsFilter.restore())\n\t\t.pipe(lessFilter)\n\t\t.pipe(less())\n\t\t.pipe(lessFilter.restore())\n\t\t.pipe(gulp.dest('out/'));\n});\n```\n\n### Restore as a file source\n\nYou may also want to restore filtered files in a different place and use it as a standalone source of files. The `end` option allow you to do so.\n\n```js\nvar gulp = require('gulp');\nvar jscs = require('gulp-jscs');\nvar gulpFilter = require('gulp-filter');\n\ngulp.task('default', function () {\n\tvar filter = gulpFilter(['*', '!src/vendor']);\n\n\tvar stream = gulp.src('src/*.js')\n\t\t// filter a subset of the files\n\t\t.pipe(filter)\n\t\t// run them through a plugin\n\t\t.pipe(jscs())\n\t\t.pipe(gulp.dest('dist'));\n\n\t// use filtered files as a gulp file source\n\tfilter.restore({end: true})\n  \t\t.pipe(gulp.dest('vendor-dist'));\n  \t\t\n  \treturn stream;\n});\n```\n\n\n## API\n\n### filter(pattern, options)\n\nReturns a [transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform) with a [.restore()](#streamrestore) method.\n\n#### pattern\n\nType: `string`, `array`, `function`\n\nAccepts a string/array with globbing patterns which are run through [multimatch](https://github.com/sindresorhus/multimatch).\n\nIf you supply a function you'll get a [vinyl file object](https://github.com/wearefractal/vinyl#file) as the first argument and you're expected to return true/false whether to include the file:\n\n```js\nfilter(function (file) {\n\treturn /unicorns/.test(file.path);\n});\n```\n\n#### options\n\nType: `object`\n\nAccepts [minimatch options](https://github.com/isaacs/minimatch#options).\n\n*Note:* Set `dot: true` if you need to match files prefixed with a dot (eg. `.gitignore`).\n\n\n### stream.restore(options)\n\nBrings back the previously filtered out files.\n\n#### options.end\n\nType: `boolean`  \nDefault: `false`\n\nSet to `true` if you want restore streams to end when their source stream ends.\n\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/gulp-filter/-/gulp-filter-2.0.2.tgz#1ceb1d113ee9942cedd49f5863b42be44bc7cd2c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/gulp-filter/-/gulp-filter-2.0.2.tgz",
    "hash": "1ceb1d113ee9942cedd49f5863b42be44bc7cd2c",
    "integrity": "sha1-HOsdET7plCzt1J9YY7Qr5EvHzSw=",
    "registry": "npm",
    "packageName": "gulp-filter"
  },
  "registry": "npm",
  "hash": "1ceb1d113ee9942cedd49f5863b42be44bc7cd2c"
}