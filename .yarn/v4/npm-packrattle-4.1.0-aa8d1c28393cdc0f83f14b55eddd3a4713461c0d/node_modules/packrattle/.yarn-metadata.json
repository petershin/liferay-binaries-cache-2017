{
  "manifest": {
    "name": "packrattle",
    "version": "4.1.0",
    "description": "GLL parser-combinator library",
    "keywords": [
      "parser",
      "packrat",
      "gll"
    ],
    "author": {
      "name": "Robey Pointer",
      "email": "robeypointer@gmail.com"
    },
    "homepage": "https://github.com/robey/packrattle",
    "repository": {
      "type": "git",
      "url": "git://github.com/robey/packrattle.git"
    },
    "license": "Apache-2.0",
    "scripts": {
      "clean": "rm -rf lib test/lib",
      "distclean": "npm run clean && rm -rf node_modules npm-debug.log",
      "prepublish": "babel --source-maps --out-dir lib src && babel --source-maps --out-dir test/lib test/src",
      "test": "mocha -R spec --colors --recursive test/lib"
    },
    "dependencies": {},
    "devDependencies": {
      "babel": "latest",
      "mocha": "latest",
      "should": "latest",
      "source-map-support": "latest"
    },
    "main": "./lib",
    "files": [
      "LICENSE.txt",
      "docs",
      "lib",
      "test"
    ],
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-packrattle-4.1.0-aa8d1c28393cdc0f83f14b55eddd3a4713461c0d\\node_modules\\packrattle\\package.json",
    "readmeFilename": "README.md",
    "readme": "![packrattle](docs/packrattle-small.png)\n\n[![Build Status](https://travis-ci.org/robey/packrattle.png?branch=master)](https://travis-ci.org/robey/packrattle)\n\nThis is a simple GLL-based parser-combinator library for javascript. It lets you write parsing code without the use of an external tool like lex or antlr: the parser is written in javascript just like the rest of your code!\n\nAn example, from the unit tests:\n\n```javascript\nvar packrattle = require(\"packrattle\");\n\nvar csv = packrattle.repeatSeparated(\n  packrattle.regex(/([^,]*)/).map(match => match[0]),\n  /,/\n);\n\ncsv.run(\"this,is,csv\");\n// [ \"this\", \"is\", \"csv\" ]\n```\n\n\nDocs\n----\n\n- [API documentation](./docs/api.md)\n- [Tutorial for making a small calculator](./docs/tutorial.md)\n\n\nWhat?\n-----\n\nParser-combinators start from a simple idea: A \"parser\" is a function that takes a string and a position within that string, and either fails to match, or succeeds, returning the matched value and moving the position forward. In other words, a parser does:\n\n    position => { newPosition, value }\n\non success, or\n\n    position => error\n\non failure.\n\nYou can start with a few basic parsers which match a string or regular expression, and build more complex parsers out of functions that combine them: \"a or b\", \"a then b\", \"repeat(a)\", and so on.\n\nBeing \"GLL-based\" means that a work queue and memoization is used to avoid loops and make backtracking fast. This lets you parse almost any grammar, even if it's left recursive or ambiguous. For example, the grammar\n\n    expr ::= (expr \"+\" expr) | /\\d+/\n\nwould need to be restructured to work in most parser libraries. It can be expressed in packrattle as\n\n```javascript\nvar expr = packrattle.alt(\n  [ () => expr, \"+\", () => expr ],\n  packrattle.regex(/\\d+/).map(match => match[0])\n);\n```\n\nand it actually matches strings:\n\n```javascript\nexpr.run(\"3+10+200\");\n// [ [ '3', '+', '10' ], '+', '200' ]\n```\n\nThe nested functions (`() => expr`) on line 2 allow javascript to handle recursive definitions by delaying evaluation. The functions will only be called once (when first invoked) and then cached.\n\n\nFurther reading\n---------------\n\n- There's a wiki page on parser-combinators here: http://en.wikipedia.org/wiki/Parser_combinator\n\n- Vegard Øye has an excellent (highly-recommended) tutorial on how GLL parsers work, with an implementation in a lisp-like language: https://github.com/epsil/gll\n\n- Daniel Spiewak wrote a paper on GLL and his work upgrading scala's parser-combinator library to use it: http://www.cs.uwm.edu/~dspiewak/papers/generalized-parser-combinators.pdf\n\n\nLicense\n-------\n\nApache 2 (open-source) license, included in 'LICENSE.txt'.\n\n\nAuthor\n------\n\nCredit and blame: Robey Pointer <robeypointer@gmail.com>\n\nSpecial thanks to Daniel Spiewak, Brian McKenna, and Vegard Øye for sharing info about GLL.\n",
    "licenseText": "Copyright 2013 Robey Pointer <robeypointer@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/packrattle/-/packrattle-4.1.0.tgz#aa8d1c28393cdc0f83f14b55eddd3a4713461c0d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/packrattle/-/packrattle-4.1.0.tgz",
    "hash": "aa8d1c28393cdc0f83f14b55eddd3a4713461c0d",
    "integrity": "sha1-qo0cKDk83A+D8UtV7d06RxNGHA0=",
    "registry": "npm",
    "packageName": "packrattle"
  },
  "registry": "npm",
  "hash": "aa8d1c28393cdc0f83f14b55eddd3a4713461c0d"
}