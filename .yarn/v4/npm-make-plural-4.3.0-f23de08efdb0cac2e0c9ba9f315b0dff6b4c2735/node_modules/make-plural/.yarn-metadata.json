{
  "manifest": {
    "name": "make-plural",
    "version": "4.3.0",
    "description": "Translates Unicode CLDR pluralization rules to executable JavaScript",
    "keywords": [
      "unicode",
      "cldr",
      "i18n",
      "internationalization",
      "pluralization"
    ],
    "author": {
      "name": "Eemeli Aro",
      "email": "eemeli@gmail.com"
    },
    "license": "ISC",
    "homepage": "https://github.com/eemeli/make-plural#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/eemeli/make-plural.git"
    },
    "bugs": {
      "url": "https://github.com/eemeli/make-plural/issues"
    },
    "files": [
      "bin/",
      "data/",
      "es6/",
      "make-plural.*",
      "umd/"
    ],
    "bin": {
      "make-plural": "./bin/make-plural"
    },
    "main": "umd/plurals",
    "scripts": {
      "lint": "standard 'src/*.js'",
      "test": "make test",
      "version": "git add -f $FILES"
    },
    "devDependencies": {
      "@babel/cli": "^7.1.2",
      "@babel/core": "^7.1.2",
      "@babel/preset-env": "^7.1.0",
      "babel-plugin-add-module-exports": "^1.0.0",
      "babelify": "^10.0.0",
      "browserify": "^16.2.3",
      "cldr-core": "^34.0.0",
      "expect.js": "*",
      "http-server": "^0.11.1",
      "mocha": "^5.2.0",
      "standard": "^12.0.1",
      "uglify-js": "^3.4.9"
    },
    "optionalDependencies": {
      "minimist": "^1.2.0"
    },
    "_registry": "npm",
    "_loc": "..\\..\\liferay-binaries-cache-2017\\.yarn\\v4\\npm-make-plural-4.3.0-f23de08efdb0cac2e0c9ba9f315b0dff6b4c2735\\node_modules\\make-plural\\package.json",
    "readmeFilename": "README.md",
    "readme": "[![ISC License](https://img.shields.io/npm/l/make-plural.svg)](http://en.wikipedia.org/wiki/ISC_license)\n[![Build Status](https://travis-ci.org/eemeli/make-plural.svg?branch=master)](https://travis-ci.org/eemeli/make-plural)\n\n\nmake-plural\n===========\n\nMake-plural is a JavaScript module that translates [Unicode CLDR] pluralization\n[rules] to JavaScript functions. It includes both a live parser as well as the\ngenerated output for the latest edition of the CLDR; the latter is just over 2kB\nin size when minified & gzipped and covers 199 languages, so it's probably what\nyou want unless you really know what you're doing.\n\nMake-plural is written in [ECMAScript 6] and transpiled using [Babel] and\n[Browserify] to CommonJS and AMD and ES6 module formats, as well as being\nsuitable for use in browser environments.\n\n[Unicode CLDR]: http://cldr.unicode.org/\n[rules]: http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\n[ECMAScript 6]: https://people.mozilla.org/~jorendorff/es6-draft.html\n[Babel]: https://babeljs.io/\n[Browserify]: http://browserify.org/\n\n\n## Installation\n\n```\nnpm install make-plural\n```\n_or_\n```\nbower install make-plural\n```\n_or_\n```\ngit clone https://github.com/eemeli/make-plural.git\ncd make-plural\nnpm install\nmake all\n```\n_or_ download the latest release from\n[here](https://github.com/eemeli/make-plural/releases/latest)\n\n\n## Precompiled plurals\n\n`umd/plurals.js` contains an UMD module that can be included with node's\n`require` or AMD's `define`. In a browser environment, it will populate a global\nobject `plurals`. Said module contains 199 functions (one per [language][rules]),\neach taking as a first parameter the value to be classified (either a number or\na string), and as an optional second parameter, a boolean that if true, applies\nordinal rather than cardinal rules.\n\n`umd/pluralCategories.js` has a similar structure to `umd/plurals.js`, but\ncontains an array of the pluralization categories the cardinal and ordinal rules\neach language's pluralization function may output.\n\n`es6/plurals.js` and `es6/pluralCategories.js` are the ES6 module equivalents of\nthe above.\n\nIf your language isn't directly included in either of the above, try removing\nany trailing parts that are separated from the stem by `-` or `_`. Note also\nthat the [capitalization of locale codes] is lowercase for the language, but\nuppercase for the country, so for example the code for Portugese as spoken in\nPortugal is `pt-PT`.\n\n[capitalization of locale codes]: https://tools.ietf.org/html/bcp47#section-2.1.1\n\n\n### Precompiled use: Node\n\n```js\nvar plurals = require('make-plural')\n// { af: [Function],\n//   ak: [Function],\n//   am: [Function],\n// snip 193 lines...\n//   yo: [Function],\n//   zh: [Function],\n//   zu: [Function] }\n\nplurals.en(1)  // 1st param is the value\n// 'one'\n\nplurals.en(2)\n// 'other'\n\nplurals.en(2, true)  // 2nd param, if true-ish, is for ordinal rules\n// 'two'\n\nconsole.log(plurals.en.toString())\n// function (n, ord) {\n//   var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n,\n//       n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);\n//   if (ord) return (n10 == 1 && n100 != 11) ? 'one'\n//       : (n10 == 2 && n100 != 12) ? 'two'\n//       : (n10 == 3 && n100 != 13) ? 'few'\n//       : 'other';\n//   return (n == 1 && v0) ? 'one' : 'other';\n// }\n\nvar pluralCategories = require('make-plural/umd/pluralCategories')\n// { af: { cardinal: [ 'one', 'other' ], ordinal: [ 'other' ] },\n//   ak: { cardinal: [ 'one', 'other' ], ordinal: [ 'other' ] },\n//   am: { cardinal: [ 'one', 'other' ], ordinal: [ 'other' ] },\n//   ar:\n//    { cardinal: [ 'zero', 'one', 'two', 'few', 'many', 'other' ],\n//      ordinal: [ 'other' ] },\n// snip 255 lines...\n//   zh: { cardinal: [ 'other' ], ordinal: [ 'other' ] },\n//   zu: { cardinal: [ 'one', 'other' ], ordinal: [ 'other' ] } }\n```\n\n### Precompiled use: Web\n\n```html\n<script src=\"path/to/make-plural/umd/plurals.js\"></script>\n<script>\n  var ru = plurals.ru\n  console.log('1: ' + plurals.ru(1) + ', 3.0: ' + plurals.ru(3.0) +\n              ', \"1.0\": ' + plurals.ru('1.0') + ', \"0\": ' + plurals.ru('0'));\n  console.log(plurals.ru.toString());\n</script>\n```\nWith outputs:\n```\n1: one, 3.0: few, \"1.0\": other, \"0\": many\n\nfunction(n, ord) {\n  var s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1),\n      i100 = i.slice(-2);\n  if (ord) return 'other';\n  return (v0 && i10 == 1 && i100 != 11) ? 'one'\n      : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12\n          || i100 > 14)) ? 'few'\n      : (v0 && i10 == 0 || v0 && (i10 >= 5 && i10 <= 9)\n          || v0 && (i100 >= 11 && i100 <= 14)) ? 'many'\n      : 'other';\n}\n```\n\nNote that with `umd/plurals.min.js`, the stringified function would be rendered\nas:\n```js\nfunction (e,t){var r=String(e).split(\".\"),n=r[0],o=!r[1],c=n.slice(-1),\ni=n.slice(-2);return t?\"other\":o&&1==c&&11!=i?\"one\":o&&c>=2&&4>=c&&(12>i||i>14)?\n\"few\":o&&0==c||o&&c>=5&&9>=c||o&&i>=11&&14>=i?\"many\":\"other\"}\n```\n\n\n## Live compiler: `make-plural.js`\n\n### MakePlural.load(cldr, ...)\nLoads CLDR rules from one or more `cldr` variables, each of which must be an\nobject formatted like [this][json].\n\nNo plural data is included by default, so you'll need to call this at least\nonce, or otherwise fill the `MakePlural.rules` object.\n\nThe default CLDR rules are included in make-plural, and may be loaded as seen\nin the examples below.\n\n[json]: https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/plurals.json\n\n\n### new MakePlural(lc, { cardinals, ordinals })\nReturns a function that takes an argument `n` and returns its plural category\nfor the given locale `lc`. If no direct match for `lc` is found, it is compared\ncase-insensitively to known locales.\n\nThe returned function has an overloaded `toString(name)` method that may be\nused to generate a clean string representation of the function, with an\noptional name `name`.\n\nThe optional second parameter may contain the following boolean members:\n* `cardinals` — if true, rules for cardinal values (1 day, 2 days, etc.) are \n  included\n* `ordinals` — if true, rules for ordinal values (1st, 2nd, etc.) are included\n\nIf both `cardinals` and `ordinals` are true, the returned function takes a\nsecond parameter `ord`. Then, if `ord` is true, the function will return the\nordinal rather than cardinal category applicable to `n` in locale `lc`.\n\nIf the second parameter is undefined, the values are taken from\n`MakePlural.cardinals` (default `true`) and `MakePlural.ordinals` (default\n`false`).\n\n\n### Live use: Node\n\n```js\nvar MakePlural = require('make-plural/make-plural').load(\n    require('make-plural/data/plurals.json'),\n    require('make-plural/data/ordinals.json'))\n// { [Function: MakePlural]\n//   cardinals: true,\n//   ordinals: false,\n//   rules:\n//    { cardinal:\n//       { af: [Object],\n//         ak: [Object],\n//         am: [Object],\n// snip 193 lines...\n//         yo: [Object],\n//         zh: [Object],\n//         zu: [Object] },\n//      ordinal:\n//       { af: [Object],\n//         am: [Object],\n//         ar: [Object],\n// snip 78 lines...\n//         vi: [Object],\n//         zh: [Object],\n//         zu: [Object] } } }\n\nvar sk = new MakePlural('sk')  // Note: not including ordinals by default\n// { [Function]\n//   _obj:\n//    { lc: 'sk',\n//      cardinals: true,\n//      ordinals: false,\n//      categories: { cardinal: [Object], ordinal: [] },\n//      parser: { v0: 1, i: 1 },\n//      tests: { obj: [Circular], ordinal: {}, cardinal: [Object] },\n//      fn: [Circular] },\n//   categories: { cardinal: [ 'one', 'few', 'many', 'other' ], ordinal: [] },\n//   test: [Function],\n//   toString: [Function] }\n\nsk(1)\n// 'one'\n\nsk(3.0)\n// 'few'\n\nsk('1.0')\n// 'many'\n\nsk('0')\n// 'other'\n\nconsole.log(sk.toString())\n// function(n) {\n//   var s = String(n).split('.'), i = s[0], v0 = !s[1];\n//   return (i == 1 && v0 ) ? 'one'\n//       : ((i >= 2 && i <= 4) && v0 ) ? 'few'\n//       : (!v0   ) ? 'many'\n//       : 'other';\n// }\n```\n\n`make-plural` may also be used in browser environments; see `test/index.html`\nfor an example of its use.\n\n\n## CLI Usage\n\n```sh\n$ ./bin/make-plural > plurals.js\n\n$ ./bin/make-plural fr\nfunction fr(n, ord) {\n  if (ord) return (n == 1) ? 'one' : 'other';\n  return (n >= 0 && n < 2) ? 'one' : 'other';\n}\n\n$ ./bin/make-plural --locale fr --value 1.5\none\n\n$ ./bin/make-plural 1.5 -l fr --ordinal\nother\n```\n\nPlease see the source of `src/index.js` for more details.\n\n\n\n## Dependencies\n\nMake-plural has no required runtime dependencies. CLDR plural rule data is\nincluded in JSON format; make-plural supports the [LDML Language Plural Rules]\nas used in CLDR release 24 and later.\n\nThe CLI binary `bin/make-plural` does use [minimist] as an argument parser, but\nthat is not required for any other use.\n\nUsing `MakePlural.load()`, you may make use of external sources of CLDR data.\nFor example, the following works when using together with [cldr-data]:\n```js\nvar cldr = require('cldr-data');\nvar MakePlural = require('make-plural/make-plural').load(\n  cldr('supplemental/plurals'),\n  cldr('supplemental/ordinals')\n);\nvar en = new MakePlural('en');\nen(3, true);\n// 'few'\n```\n\n[LDML Language Plural Rules]: http://unicode.org/reports/tr35/tr35-numbers.html#Language_Plural_Rules\n[minimist]: https://www.npmjs.com/package/minimist\n[cldr-data]: https://www.npmjs.org/package/cldr-data\n",
    "licenseText": "Copyright (c) 2014-2016 by Eemeli Aro <eemeli@gmail.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/make-plural/-/make-plural-4.3.0.tgz#f23de08efdb0cac2e0c9ba9f315b0dff6b4c2735",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/make-plural/-/make-plural-4.3.0.tgz",
    "hash": "f23de08efdb0cac2e0c9ba9f315b0dff6b4c2735",
    "integrity": "sha512-xTYd4JVHpSCW+aqDof6w/MebaMVNTVYBZhbB/vi513xXdiPT92JMVCo0Jq8W2UZnzYRFeVbQiQ+I25l13JuKvA==",
    "registry": "npm",
    "packageName": "make-plural"
  },
  "registry": "npm",
  "hash": "f23de08efdb0cac2e0c9ba9f315b0dff6b4c2735"
}